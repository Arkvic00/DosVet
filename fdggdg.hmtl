<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Dosis Perronas</title>
    
    <!-- Tailwind CSS -->
    <script src="https://cdn.tailwindcss.com"></script>
    
    <!-- React Libraries -->
    <script src="https://unpkg.com/react@17/umd/react.development.js"></script>
    <script src="https://unpkg.com/react-dom@17/umd/react-dom.development.js"></script>
    
    <!-- Babel to transpile JSX in the browser -->
    <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>

    <!-- jsPDF for PDF Export -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
    
    <style>
        body {
            font-family: 'Inter', sans-serif;
            background-color: #020617; /* bg-slate-950 */
        }
        .prose p { margin-bottom: 0.75em; }
        .prose strong { font-weight: bold; color: #93c5fd; } /* text-blue-300 */
        .prose ul, .prose ol { margin-left: 1.5em; margin-bottom: 1em; }
        .prose li { margin-bottom: 0.25em; }
        .prose h3 { font-size: 1.1em; font-weight: bold; margin-top: 1em; margin-bottom: 0.5em; color: #60a5fa; } /* text-blue-400 */
        ::-webkit-scrollbar { width: 8px; }
        ::-webkit-scrollbar-track { background: #1e293b; }
        ::-webkit-scrollbar-thumb { background: #475569; border-radius: 4px; }
        ::-webkit-scrollbar-thumb:hover { background: #64748b; }
        .tooltip {
            position: relative;
            display: inline-block;
        }
        .tooltip .tooltiptext {
            visibility: hidden;
            width: 220px;
            background-color: #1e293b;
            color: #fff;
            text-align: center;
            border-radius: 6px;
            padding: 5px;
            position: absolute;
            z-index: 101;
            bottom: 125%;
            left: 50%;
            margin-left: -110px;
            opacity: 0;
            transition: opacity 0.3s;
            font-size: 0.75rem;
            line-height: 1.25;
        }
        .tooltip:hover .tooltiptext {
            visibility: visible;
            opacity: 1;
        }
        .ai-response-container {
            white-space: pre-wrap; /* Allows text to wrap and respects line breaks */
            font-family: monospace;
            background-color: #1a202c;
            padding: 1rem;
            border-radius: 0.5rem;
            color: #e2e8f0;
            margin-top: 1rem;
            border: 1px solid #4a5568;
        }
    </style>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;700;800&display=swap" rel="stylesheet">
</head>
<body class="bg-slate-950">
    <div id="root"></div>

    <script type="text/babel">
        // --- SVG Icons ---
        const ClipboardList = (props) => ( <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" {...props}><rect width="8" height="4" x="8" y="2" rx="1" ry="1" /><path d="M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2" /><path d="M12 11h4" /><path d="M12 16h4" /><path d="M8 11h.01" /><path d="M8 16h.01" /></svg> );
        const X = (props) => ( <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" {...props}><line x1="18" x2="6" y1="6" y2="18" /><line x1="6" x2="18" y1="6" y2="18" /></svg> );
        const PlusCircle = (props) => ( <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" {...props}><circle cx="12" cy="12" r="10" /><line x1="12" x2="12" y1="8" y2="16" /><line x1="8" x2="16" y1="12" y2="12" /></svg> );
        const RotateCw = (props) => ( <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" {...props}><path d="M21 2v6h-6" /><path d="M3 12a9 9 0 0 1 15-6.7L21 8" /><path d="M3 22v-6h6" /><path d="M21 12a9 9 0 0 1-15 6.7L3 16" /></svg> );
        const Siren = (props) => ( <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" {...props}><path d="M12 12c-1.933 0-3.5-1.567-3.5-3.5S10.067 5 12 5s3.5 1.567 3.5 3.5"/><path d="M12 12v6"/><path d="M12 12H6m6 0h6"/><path d="M18 12c0 3.314-2.686 6-6 6s-6-2.686-6-6"/><path d="M6 12c0-3.314 2.686-6 6-6s6 2.686 6 6"/><path d="M12 5V2"/><path d="M5 12H2m20 0h-3"/></svg> );
        const Calculator = (props) => ( <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" {...props}><rect width="16" height="20" x="4" y="2" rx="2" /><line x1="8" x2="16" y1="6" y2="6" /><line x1="16" x2="16" y1="14" y2="18" /><line x1="16" x2="12" y1="14" y2="14" /><line x1="12" x2="12" y1="14" y2="18" /><line x1="8" x2="8" y1="14" y2="18" /></svg> );
        const AlertTriangle = (props) => ( <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" {...props}><path d="m21.73 18-8-14a2 2 0 0 0-3.46 0l-8 14A2 2 0 0 0 4 21h16a2 2 0 0 0 1.73-3Z"/><line x1="12" x2="12" y1="9" y2="13"/><line x1="12" x2="12.01" y1="17" y2="17"/></svg> );
        const Square = (props) => ( <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" {...props}><rect width="18" height="18" x="3" y="3" rx="2"/></svg> );
        const ChevronDown = (props) => ( <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" {...props}><path d="m6 9 6 6 6-6"/></svg> );
        const Droplet = (props) => ( <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" {...props}><path d="M12 22a7 7 0 0 0 7-7c0-2-1-3.9-3-5.5s-3.5-4-4-6.5c-.5 2.5-2 4.9-4 6.5C5 11.1 4 13 4 15a7 7 0 0 0 7 7z"/></svg> );
        const Beaker = (props) => ( <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" {...props}><path d="M4.5 3h15"/><path d="M6 3v16a2 2 0 0 0 2 2h8a2 2 0 0 0 2-16V3"/><path d="M6 14h12"/></svg> );
        const Menu = (props) => ( <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" {...props}><line x1="4" x2="20" y1="12" y2="12"/><line x1="4" x2="20" y1="6" y2="6"/><line x1="4" x2="20" y1="18" y2="18"/></svg> );
        const MoreVertical = (props) => ( <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" {...props}><circle cx="12" cy="12" r="1"/><circle cx="12" cy="5" r="1"/><circle cx="12" cy="19" r="1"/></svg> );
        const HelpCircle = (props) => ( <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" {...props}><circle cx="12" cy="12" r="10"></circle><path d="M9.09 9a3 3 0 0 1 5.83 1c0 2-3 3-3 3"></path><line x1="12" y1="17" x2="12.01" y2="17"></line></svg> );
        const FileDown = (props) => ( <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" {...props}><path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4" /><polyline points="7 10 12 15 17 10" /><line x1="12" y1="15" x2="12" y2="3" /></svg> );
        const Star = (props) => ( <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" {...props}><polygon points="12 2 15.09 8.26 22 9.27 17 14.14 18.18 21.02 12 17.77 5.82 21.02 7 14.14 2 9.27 8.91 8.26 12 2" /></svg> );
        const BookOpen = (props) => ( <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" {...props}><path d="M2 3h6a4 4 0 0 1 4 4v14a3 3 0 0 0-3-3H2z"/><path d="M22 3h-6a4 4 0 0 0-4 4v14a3 3 0 0 1 3-3h7z"/></svg> );
        const HeartPulse = (props) => ( <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" {...props}><path d="M19.5 12.5c0-1.5-1.1-2.8-2.5-3-1.4-.2-2.8.4-3.5 1.5-1.1 1.6-3.2 1.6-4.2 0-1.1-1.6-3.2-1.6-4.2 0C3.7 12.4 3 14.2 3 16c0 2.8 2.2 5 5 5 1.2 0 2.3-.4 3.1-1.2.8.8 1.9 1.2 3.1 1.2 2.8 0 5-2.2 5-5 0-1.1-.4-2.2-1-3-.6-.8-1.5-1.2-2.5-1.2z"/><path d="M12.5 10.5 15 13l2-1.5-2-1.5-2.5 2.5z"/></svg> );
        const FlaskConical = (props) => ( <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" {...props}><path d="M10 2v7.31"/><path d="M14 9.31V2"/><path d="M8.5 2h7"/><path d="M14 9.31 16.5 4"/><path d="M10 9.31 7.5 4"/><path d="M12 14v8"/><path d="M8.7 14H5.1c-1.7 0-3.1 1.4-3.1 3.1 0 1.3.8 2.5 2 2.9l1.2.4c.9.3 1.8.3 2.7 0l1.2-.4c1.2-.4 2-1.6 2-2.9.1-1.7-1.3-3.1-3-3.1h-3.7z"/></svg> );
        const Save = (props) => ( <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" {...props}><path d="M19 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h11l5 5v11a2 2 0 0 1-2 2z" /><polyline points="17 21 17 13 7 13 7 21" /><polyline points="7 3 7 8 15 8" /></svg> );
        const Slash = (props) => ( <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" {...props}><circle cx="12" cy="12" r="10"/><line x1="4.93" y1="4.93" x2="19.07" y2="19.07"/></svg> );
        const Lightbulb = (props) => ( <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" {...props}><path d="M15 14c.2-1 .7-1.7 1.5-2.5 1-.9 1.5-2.2 1.5-3.5A6 6 0 0 0 6 8c0 1 .2 2.2 1.5 3.5.7.8 1.3 1.5 1.5 2.5"/><path d="M9 18h6"/><path d="M10 22h4"/></svg> );
        const Zap = (props) => ( <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" {...props}><polygon points="13 2 3 14 12 14 11 22 21 10 12 10 13 2"/></svg> );
        const Shuffle = (props) => ( <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" {...props}><polyline points="16 3 21 3 21 8"/><line x1="4" y1="20" x2="21" y2="3"/><polyline points="16 16 21 16 21 21"/><line x1="15" y1="15" x2="21" y2="21"/><line x1="4" y1="4" x2="9" y2="9"/></svg> );
        const Users = (props) => ( <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" {...props}><path d="M16 21v-2a4 4 0 0 0-4-4H6a4 4 0 0 0-4 4v2"/><circle cx="9" cy="7" r="4"/><path d="M22 21v-2a4 4 0 0 0-3-3.87"/><path d="M16 3.13a4 4 0 0 1 0 7.75"/></svg> );


        // --- UNIFIED DATABASE ---
        const initialMedications = [
            {"name": "Isoniazida (INH)", "commercial_names": ["Nydrazid®"], "concentration": {"Tabletas": "100 mg"}, "doses": {"Perros": [{"purpose": "Tratamiento de infecciones por Micobacterias", "dose_range_min": 5, "dose_range_rec": 10, "dose_range_max": 20, "unit": "mg/kg", "route": "PO", "frequency": "c/12-24h"}]}, "functions": "Agente antimicobacteriano. Se utiliza como parte de un protocolo de múltiples fármacos para tratar la tuberculosis y otras infecciones por micobacterias.", "recommendations": "NUNCA debe usarse como monoterapia. Se recomienda suplementar con piridoxina (Vitamina B6) para prevenir la neurotoxicidad.", "precautions": "Puede causar hepatotoxicidad y neurotoxicidad periférica.", "contraindications": "Enfermedad hepática.", "interactions": {"summary": "Inhibe el metabolismo de otros fármacos.", "specifics": []}, "substitutes": ["Rifampina", "Etambutol", "Claritromicina"]},
            {"name": "Isotretinoína", "commercial_names": ["Accutane®"], "concentration": {"Cápsulas": "10 mg"}, "doses": {"Perros": [{"purpose": "Trastornos de queratinización, adenomas sebáceos", "dose_range_min": 1, "dose_range_rec": 2, "dose_range_max": 3, "unit": "mg/kg", "route": "PO", "frequency": "c/12-24h"}]}, "functions": "Retinoide sintético. Se utiliza para tratar una variedad de dermatosis, especialmente aquellas que involucran las glándulas sebáceas.", "recommendations": "Administrar con una comida grasa para mejorar la absorción. El efecto puede tardar varios meses.", "precautions": "Es altamente teratogénico. Puede causar sequedad de mucosas (queratoconjuntivitis seca) y elevación de triglicéridos.", "contraindications": "Gestación, KCS preexistente.", "interactions": {"summary": "No usar con tetraciclinas o vitamina A.", "specifics": []}, "substitutes": ["Acitretina"]},
            {"name": "Itraconazol", "commercial_names": ["Sporanox®", "Itrafungol®"], "concentration": {"Solución Oral": "10 mg/mL", "Cápsulas": "100 mg"}, "doses": {"Perros": [{"purpose": "Infecciones fúngicas sistémicas (Aspergilosis, Blastomicosis)", "dose_range_min": 5, "dose_range_rec": 5, "dose_range_max": 10, "unit": "mg/kg", "route": "PO", "frequency": "c/12-24h"}], "Gatos": [{"purpose": "Dermatofitosis, Criptococosis", "dose_range_min": 5, "dose_range_rec": 7.5, "dose_range_max": 10, "unit": "mg/kg", "route": "PO", "frequency": "c/12-24h"}], "Aves": [{"purpose": "Aspergilosis", "dose_range_min": 5, "dose_range_rec": 7.5, "dose_range_max": 10, "unit": "mg/kg", "route": "PO", "frequency": "c/12-24h"}]}, "functions": "Antifúngico triazol de amplio espectro. Inhibe la síntesis de ergosterol en la membrana celular del hongo. Es lipofílico y se concentra en la piel y el sebo.", "recommendations": "La solución oral tiene mejor biodisponibilidad que las cápsulas y no requiere un medio ácido. Administrar las cápsulas con comida.", "precautions": "El principal efecto adverso es la hepatotoxicidad. También puede causar anorexia y vómitos. Es un potente inhibidor de las enzimas hepáticas CYP450.", "contraindications": "Enfermedad hepática severa, gestación. Sensibilidad racial: se ha reportado vasculitis cutánea en Pastores Alemanes.", "interactions": {"summary": "Potente inhibidor del CYP450, aumenta los niveles de muchos otros fármacos.", "specifics": [{"drug": "Ciclosporina, Digoxina, Cisaprida, Ivermectina", "effect": "Aumenta sus niveles séricos, riesgo de toxicidad"}]}, "substitutes": ["Fluconazol", "Terbinafina", "Ketoconazol"]},
            {"name": "Ivermectina", "commercial_names": ["Heartgard®", "Ivomec®"], "concentration": {"Solución Inyectable al 1%": "10 mg/mL", "Tabletas masticables": "68 mcg"}, "doses": {"Perros": [{"purpose": "Sarna sarcóptica, demodicosis", "dose_range_min": 300, "dose_range_rec": 450, "dose_range_max": 600, "unit": "mcg/kg", "route": "PO, SC", "frequency": "c/24h (demodex) o cada 1-2 semanas (sarcoptes)"}, {"purpose": "Prevención de dirofilariasis", "dose_range_min": 6, "dose_range_rec": 6, "dose_range_max": 12, "unit": "mcg/kg", "route": "PO", "frequency": "Mensual"}], "Gatos": [{"purpose": "Ácaros del oído (Otodectes), parásitos internos", "dose_range_min": 200, "dose_range_rec": 300, "dose_range_max": 400, "unit": "mcg/kg", "route": "PO, SC"}], "Bovinos": [{"purpose": "Endectocida", "dose_range_min": 200, "dose_range_rec": 200, "dose_range_max": 200, "unit": "mcg/kg", "route": "SC"}]}, "functions": "Endectocida de la clase de las avermectinas. Actúa sobre los canales de cloruro mediados por glutamato en los nervios y células musculares de los invertebrados, causando parálisis y muerte.", "recommendations": "Las dosis utilizadas para tratar sarna (dosis altas) son extra-etiqueta. Realizar una prueba de mutación del gen MDR1 en razas susceptibles.", "precautions": "Puede causar neurotoxicidad severa (depresión, ataxia, convulsiones, muerte) en perros con la mutación del gen MDR1.", "contraindications": "NO USAR A DOSIS ALTAS sin una prueba genética previa en razas susceptibles (Collie, Pastor Australiano, Pastor de Shetland, y sus cruces). No usar en tortugas o galápagos (es fatal).", "interactions": {"summary": "El riesgo de neurotoxicidad aumenta con inhibidores de la P-glicoproteína.", "specifics": [{"drug": "Ketoconazol, Itraconazol, Ciclosporina", "effect": "Aumentan el riesgo de toxicidad neurológica"}]}, "substitutes": ["Selamectina", "Moxidectina", "Fluralaner"]},
            {"name": "Caolín/Pectina", "commercial_names": ["Kaopectate® (formulaciones veterinarias)"], "concentration": {"Suspensión Oral": "Variable"}, "doses": {"Perros": [{"purpose": "Antidiarreico adsorbente", "dose_range_min": 1, "dose_range_rec": 1.5, "dose_range_max": 2, "unit": "mL/kg", "route": "PO", "frequency": "c/4-6h"}], "Gatos": [{"purpose": "Antidiarreico adsorbente", "dose_range_min": 1, "dose_range_rec": 1.5, "dose_range_max": 2, "unit": "mL/kg", "route": "PO", "frequency": "c/4-6h"}]}, "functions": "Adsorbente y demulcente. El caolín adsorbe toxinas y bacterias, mientras que la pectina recubre la mucosa intestinal. Se utiliza para el tratamiento sintomático de la diarrea.", "recommendations": "Su eficacia es cuestionable y su uso ha disminuido. Agitar bien antes de usar.", "precautions": "Muy seguro. Puede causar estreñimiento a dosis altas.", "contraindications": "Sospecha de obstrucción intestinal.", "interactions": {"summary": "Puede disminuir la absorción de otros fármacos orales.", "specifics": []}, "substitutes": ["Subsalicilato de Bismuto (en perros)", "Probióticos"]},
            {"name": "Ketamina HCl", "commercial_names": ["Ketaset®", "Vetalar®"], "concentration": {"Solución Inyectable": "100 mg/mL"}, "doses": {"Perros": [{"purpose": "Inducción anestésica (con benzodiazepina)", "dose_range_min": 5, "dose_range_rec": 7.5, "dose_range_max": 10, "unit": "mg/kg", "route": "IV, IM"}], "Gatos": [{"purpose": "Restricción química, anestesia", "dose_range_min": 5, "dose_range_rec": 15, "dose_range_max": 20, "unit": "mg/kg", "route": "IM"}], "Equinos": [{"purpose": "Inducción anestésica (con xilazina)", "dose_range_min": 2.2, "dose_range_rec": 2.2, "dose_range_max": 2.2, "unit": "mg/kg", "route": "IV"}]}, "functions": "Anestésico disociativo. Antagonista no competitivo del receptor NMDA. Produce un estado cataléptico con analgesia somática profunda, pero pobre relajación muscular y analgesia visceral.", "recommendations": "Siempre debe usarse en combinación con un sedante/relajante muscular (benzodiazepina, agonista alfa-2) para contrarrestar la rigidez muscular y proporcionar una mejor anestesia.", "precautions": "Mantiene los reflejos (palpebral, laríngeo), los ojos permanecen abiertos (requiere lubricación). Aumenta la frecuencia cardíaca, la presión arterial y la presión intracraneal/intraocular.", "contraindications": "Enfermedad cardiaca severa, insuficiencia renal (en gatos), traumatismo craneoencefálico, glaucoma.", "interactions": {"summary": "Potencia el efecto de otros anestésicos.", "specifics": []}, "substitutes": ["Tiletamina/Zolazepam", "Propofol", "Alfaxalona"]},
            {"name": "Ketoconazol", "commercial_names": ["Nizoral®"], "concentration": {"Tabletas": "200 mg", "Champú": "2%"}, "doses": {"Perros": [{"purpose": "Antifúngico (Malassezia, dermatofitos)", "dose_range_min": 5, "dose_range_rec": 10, "dose_range_max": 15, "unit": "mg/kg", "route": "PO", "frequency": "c/12-24h"}, {"purpose": "Tratamiento de hiperadrenocorticismo (Cushing)", "dose_range_min": 5, "dose_range_rec": 10, "dose_range_max": 15, "unit": "mg/kg", "route": "PO", "frequency": "c/12h"}]}, "functions": "Antifúngico azol que también inhibe la síntesis de esteroides (cortisol, testosterona). Se utiliza para tratar infecciones fúngicas y como una opción médica para el Cushing.", "recommendations": "Administrar con comida para mejorar la absorción y reducir el malestar GI. Su uso como antifúngico sistémico ha sido mayormente reemplazado por el itraconazol.", "precautions": "Puede causar hepatotoxicidad y anorexia. Es un potente inhibidor de las enzimas hepáticas CYP450.", "contraindications": "Enfermedad hepática severa, gestación.", "interactions": {"summary": "Potente inhibidor del CYP450, aumenta los niveles de muchos otros fármacos.", "specifics": [{"drug": "Ciclosporina, Ivermectina, Cisaprida", "effect": "Aumenta drásticamente sus niveles, riesgo de toxicidad"}]}, "substitutes": ["Itraconazol", "Fluconazol", "Trilostano (para Cushing)"]},
            {"name": "Lactulosa", "commercial_names": ["Cephulac®", "Enulose®"], "concentration": {"Jarabe": "667 mg/mL"}, "doses": {"Perros": [{"purpose": "Laxante osmótico", "dose_range_min": 1, "dose_range_rec": 1, "dose_range_max": 1, "unit": "mL/5kg", "route": "PO", "frequency": "c/8-12h"}, {"purpose": "Encefalopatía hepática", "dose_range_min": 15, "dose_range_rec": 20, "dose_range_max": 30, "unit": "mL/perro", "route": "PO, Rectal", "frequency": "c/8h"}], "Gatos": [{"purpose": "Estreñimiento, megacolon", "dose_range_min": 1, "dose_range_rec": 2.5, "dose_range_max": 5, "unit": "mL/gato", "route": "PO", "frequency": "c/8-12h"}], "Aves": [{"purpose": "Laxante, encefalopatía hepática", "dose_range_min": 0.1, "dose_range_rec": 0.3, "dose_range_max": 0.5, "unit": "mL/kg", "route": "PO", "frequency": "c/8-12h"}]}, "functions": "Disacárido no digerible. Actúa como laxante osmótico al retener agua en el colon. En la encefalopatía hepática, acidifica el contenido del colon, atrapando el amoníaco como ión amonio para su excreción.", "recommendations": "La dosis se ajusta hasta producir 2-3 heces blandas pero formadas al día. Se puede mezclar con la comida. Su sabor dulce puede ser rechazado por algunos animales.", "precautions": "Puede causar flatulencia, cólicos y diarrea. La sobredosis puede causar deshidratación y desequilibrios electrolíticos.", "contraindications": "Obstrucción intestinal.", "interactions": {"summary": "No usar con otros laxantes.", "specifics": []}, "substitutes": ["Polietilenglicol 3350"]},
            {"name": "Levetiracetam", "commercial_names": ["Keppra®"], "concentration": {"Tabletas": "500 mg", "Solución Inyectable": "100 mg/mL"}, "doses": {"Perros": [{"purpose": "Anticonvulsivo", "dose_range_min": 20, "dose_range_rec": 30, "dose_range_max": 60, "unit": "mg/kg", "route": "PO, IV", "frequency": "c/8h"}], "Gatos": [{"purpose": "Anticonvulsivo", "dose_range_min": 20, "dose_range_rec": 30, "dose_range_max": 60, "unit": "mg/kg", "route": "PO", "frequency": "c/8h"}]}, "functions": "Anticonvulsivo de nueva generación. Se utiliza como terapia de primera línea o adyuvante para la epilepsia. Es el fármaco de elección para el status epilepticus si las benzodiazepinas fallan.", "recommendations": "Tiene un perfil de seguridad muy alto. El principal inconveniente es la necesidad de administrarlo tres veces al día. Las formulaciones de liberación prolongada (XR) pueden permitir una dosificación c/12h.", "precautions": "Extremadamente seguro. Puede causar sedación y ataxia leves y transitorias. Se puede desarrollar tolerancia con el tiempo ('efecto luna de miel').", "contraindications": "Hipersensibilidad.", "interactions": {"summary": "No tiene interacciones farmacológicas significativas.", "specifics": []}, "substitutes": ["Fenobarbital", "Bromuro de Potasio", "Zonisamida"]},
            {"name": "Levotiroxina Sódica (T4)", "commercial_names": ["Soloxine®", "Thyro-Tabs®"], "concentration": {"Tabletas": "200 mcg (0.2 mg)"}, "doses": {"Perros": [{"purpose": "Terapia de reemplazo para hipotiroidismo", "dose_range_min": 0.02, "dose_range_rec": 0.02, "dose_range_max": 0.02, "unit": "mg/kg", "route": "PO", "frequency": "c/12-24h"}], "Gatos": [{"purpose": "Hipotiroidismo", "dose_range_min": 0.05, "dose_range_rec": 0.075, "dose_range_max": 0.1, "unit": "mg/gato", "route": "PO", "frequency": "c/24h"}]}, "functions": "Forma sintética de la hormona tiroidea T4. Es el tratamiento de elección para el hipotiroidismo en perros.", "recommendations": "La dosis se ajusta según el monitoreo de los niveles de T4 total (4-6 horas post-píldora). Administrar de forma consistente con o sin comida.", "precautions": "La sobredosis (tirotoxicosis) puede causar taquicardia, polifagia, pérdida de peso, nerviosismo y poliuria/polidipsia.", "contraindications": "Hipertiroidismo, infarto agudo de miocardio.", "interactions": {"summary": "La absorción puede verse afectada por antiácidos y suplementos. Muchos fármacos alteran sus niveles.", "specifics": [{"drug": "Fenobarbital", "effect": "Aumenta el metabolismo de la levotiroxina, pudiendo requerir un aumento de la dosis"}]}, "substitutes": ["Liotironina (T3, uso raro)"]},
            {"name": "Lidocaína HCl", "commercial_names": ["Xylocaine®"], "concentration": {"Solución Inyectable": "2% (20 mg/mL)"}, "doses": {"Perros": [{"purpose": "Antiarrítmico (taquicardia ventricular)", "dose_range_min": 1, "dose_range_rec": 2, "dose_range_max": 2, "unit": "mg/kg (bolo IV lento)", "route": "IV"}, {"purpose": "Analgésico (infusión continua)", "dose_range_min": 25, "dose_range_rec": 30, "dose_range_max": 50, "unit": "mcg/kg/min", "route": "IV"}], "Gatos": [{"purpose": "Antiarrítmico", "dose_range_min": 0.25, "dose_range_rec": 0.5, "dose_range_max": 1, "unit": "mg/kg (bolo IV muy lento)", "route": "IV"}]}, "functions": "Antiarrítmico de clase Ib y anestésico local. Se utiliza para tratar arritmias ventriculares de emergencia. También se usa en infusión continua para proporcionar analgesia sistémica.", "recommendations": "NO USAR formulaciones que contengan epinefrina por vía intravenosa. Los gatos son mucho más sensibles a la toxicidad.", "precautions": "La sobredosis puede causar toxicidad del SNC (temblores, convulsiones) y depresión cardiovascular. Usar con extrema cautela en gatos.", "contraindications": "Bloqueo AV de alto grado, hipersensibilidad a las amidas.", "interactions": {"summary": "La toxicidad aumenta con fármacos que reducen su metabolismo.", "specifics": []}, "substitutes": ["Procainamida", "Mexiletina (oral)"]},
            {"name": "Lomustina (CCNU)", "commercial_names": ["CeeNU®"], "concentration": {"Cápsulas": "40 mg"}, "doses": {"Perros": [{"purpose": "Quimioterapia (linfoma, mastocitomas, tumores cerebrales)", "dose_range_min": 60, "dose_range_rec": 70, "dose_range_max": 90, "unit": "mg/m²", "route": "PO", "frequency": "Cada 21-42 días"}], "Gatos": [{"purpose": "Quimioterapia", "dose_range_min": 40, "dose_range_rec": 50, "dose_range_max": 60, "unit": "mg/m²", "route": "PO", "frequency": "Cada 21-42 días"}]}, "functions": "Agente alquilante (nitrosourea) antineoplásico. Es lipofílico y cruza la barrera hematoencefálica, lo que lo hace útil para tumores del SNC.", "recommendations": "Manejar con guantes. Administrar con un antiemético. Monitorear hemogramas y función hepática.", "precautions": "Causa mielosupresión severa, retardada y acumulativa (el nadir ocurre 1-3 semanas después). También es hepatotóxico.", "contraindications": "Mielosupresión severa, enfermedad hepática.", "interactions": {"summary": "Aumenta la mielosupresión con otros fármacos similares.", "specifics": []}, "substitutes": ["Citarabina", "Procarbazina"]},
            {"name": "Loperamida HCl", "commercial_names": ["Imodium®"], "concentration": {"Tabletas": "2 mg"}, "doses": {"Perros": [{"purpose": "Antidiarreico", "dose_range_min": 0.1, "dose_range_rec": 0.1, "dose_range_max": 0.2, "unit": "mg/kg", "route": "PO", "frequency": "c/8-12h"}]}, "functions": "Opioide sintético que actúa sobre los receptores mu en el intestino para disminuir la motilidad y las secreciones, tratando la diarrea.", "recommendations": "No usar si la diarrea puede ser infecciosa o tóxica, ya que puede aumentar la absorción de toxinas.", "precautions": "Puede causar estreñimiento, hinchazón y sedación. Usar con extrema cautela en razas con mutación MDR1, ya que puede cruzar la barrera hematoencefálica y causar toxicidad neurológica severa.", "contraindications": "Diarrea infecciosa, obstrucción intestinal. Sensibilidad genética: razas con mutación del gen MDR1 (Collie, Pastor Australiano, etc.).", "interactions": {"summary": "El riesgo de neurotoxicidad aumenta con inhibidores de la P-glicoproteína.", "specifics": []}, "substitutes": ["Protectores de mucosa (Caolín/Pectina), Probióticos"]},
            {"name": "Lufenurón", "commercial_names": ["Program®", "Sentinel® (combinado)"], "concentration": {"Tabletas": "204.9 mg", "Suspensión Inyectable (gatos)": "80 mg"}, "doses": {"Perros": [{"purpose": "Control de pulgas (inhibidor del desarrollo)", "dose_range_min": 10, "dose_range_rec": 10, "dose_range_max": 10, "unit": "mg/kg", "route": "PO", "frequency": "Mensual"}], "Gatos": [{"purpose": "Control de pulgas, tratamiento de dermatofitosis (tiña)", "dose_range_min": 30, "dose_range_rec": 60, "dose_range_max": 100, "unit": "mg/kg", "route": "PO, SC (inyectable de 6 meses)", "frequency": "Mensual (oral) o semestral (inyectable)"}]}, "functions": "Inhibidor del desarrollo de insectos. Inhibe la síntesis de quitina, impidiendo que las larvas de pulga se desarrollen y que los huevos eclosionen. No mata a las pulgas adultas.", "recommendations": "Administrar con una comida completa para asegurar una buena absorción. Para el control de la tiña, su uso es extra-etiqueta y la evidencia es controvertida.", "precautions": "Extremadamente seguro. Pueden ocurrir vómitos o letargo en raras ocasiones.", "contraindications": "Hipersensibilidad.", "interactions": {"summary": "No se han reportado interacciones.", "specifics": []}, "substitutes": ["Isoxazolinas (Bravecto, Nexgard, Simparica)", "Fipronil", "Selamectina"]},
            {"name": "Lisina (L-Lisina)", "concentration": {"Polvo": "500 mg/medida"}, "doses": {"Gatos": [{"purpose": "Suplemento para inhibir la replicación del Herpesvirus Felino (FHV-1)", "dose_range_min": 250, "dose_range_rec": 500, "dose_range_max": 500, "unit": "mg/gato", "route": "PO", "frequency": "c/12-24h"}]}, "functions": "Aminoácido esencial. Se cree que compite con la arginina, un aminoácido necesario para la replicación del FHV-1, disminuyendo así la severidad de los signos clínicos.", "recommendations": "La evidencia reciente sobre su eficacia es muy controvertida y algunos estudios sugieren que podría no ser beneficioso. Administrar mezclado con la comida.", "precautions": "Extremadamente seguro.", "contraindications": "Ninguna.", "interactions": {"summary": "No se han reportado interacciones.", "specifics": []}, "substitutes": ["Famciclovir (tratamiento antiviral probado)"]},
            {"name": "Manitol", "commercial_names": ["Osmitrol®"], "concentration": {"Solución Inyectable": "20%"}, "doses": {"Perros": [{"purpose": "Reducción de presión intracraneal o intraocular", "dose_range_min": 0.25, "dose_range_rec": 0.5, "dose_range_max": 1, "unit": "g/kg", "route": "IV lenta (durante 15-20 min)"}]}, "functions": "Diurético osmótico. Aumenta la osmolalidad del plasma, atrayendo agua desde los tejidos (como el cerebro y el humor acuoso) hacia el torrente sanguíneo para su excreción renal.", "recommendations": "Es el tratamiento de emergencia para el edema cerebral y el glaucoma agudo. El paciente debe estar adecuadamente hidratado antes de la administración.", "precautions": "Puede causar deshidratación, desequilibrios electrolíticos y sobrecarga de fluidos si se administra demasiado rápido o en pacientes con insuficiencia cardiaca.", "contraindications": "Deshidratación severa, anuria, insuficiencia cardiaca congestiva, hemorragia intracraneal activa.", "interactions": {"summary": "No se han reportado interacciones significativas.", "specifics": []}, "substitutes": ["Solución salina hipertónica (para edema cerebral)"]},
            {"name": "Marbofloxacina", "commercial_names": ["Zeniquin®"], "concentration": {"Tabletas": "25 mg"}, "doses": {"Perros": [{"purpose": "Infecciones de piel, tejidos blandos y urinarias", "dose_range_min": 2.75, "dose_range_rec": 4, "dose_range_max": 5.5, "unit": "mg/kg", "route": "PO", "frequency": "c/24h"}], "Gatos": [{"purpose": "Infecciones de piel y tejidos blandos", "dose_range_min": 2.75, "dose_range_rec": 4, "dose_range_max": 5.5, "unit": "mg/kg", "route": "PO", "frequency": "c/24h"}]}, "functions": "Antibiótico fluoroquinolona de tercera generación. Similar a la enrofloxacina pero puede tener mejor actividad contra algunos patógenos y un perfil de seguridad potencialmente mejor en gatos.", "recommendations": "Puede usarse como alternativa a la enrofloxacina.", "precautions": "Puede causar daño al cartílago articular en animales en crecimiento. El riesgo de retinopatía en gatos es mucho menor que con la enrofloxacina, pero aún es una posibilidad teórica.", "contraindications": "Animales en crecimiento, hipersensibilidad.", "interactions": {"summary": "La absorción se reduce con antiácidos y suplementos minerales.", "specifics": []}, "substitutes": ["Enrofloxacina", "Pradofloxacina"]},
            {"name": "Maropitant Citrato", "commercial_names": ["Cerenia®"], "concentration": {"Solución Inyectable": "10 mg/mL", "Tabletas": "16 mg"}, "doses": {"Perros": [{"purpose": "Prevención y tratamiento del vómito", "dose_range_min": 1, "dose_range_rec": 1, "dose_range_max": 1, "unit": "mg/kg", "route": "SC, IV, PO", "frequency": "c/24h"}, {"purpose": "Prevención del mareo por movimiento", "dose_range_min": 8, "dose_range_rec": 8, "dose_range_max": 8, "unit": "mg/kg", "route": "PO", "frequency": "2 horas antes del viaje"}], "Gatos": [{"purpose": "Prevención y tratamiento del vómito", "dose_range_min": 1, "dose_range_rec": 1, "dose_range_max": 1, "unit": "mg/kg", "route": "SC, IV, PO", "frequency": "c/24h"}]}, "functions": "Antiemético de acción central. Es un antagonista del receptor de neuroquinina-1 (NK-1), bloqueando la acción de la sustancia P en el centro del vómito. Es eficaz contra el vómito de múltiples causas.", "recommendations": "Es un antiemético muy potente y de amplio espectro. La inyección subcutánea puede ser dolorosa; refrigerar la solución puede reducir el dolor.", "precautions": "Generalmente muy seguro. Usar con cautela en pacientes con disfunción hepática y en cachorros de menos de 8 semanas.", "contraindications": "Sospecha de obstrucción gastrointestinal.", "interactions": {"summary": "No se han reportado interacciones clínicas significativas.", "specifics": []}, "substitutes": ["Ondansetrón", "Metoclopramida"]},
            {"name": "Meclizina HCl", "commercial_names": ["Bonine®", "Antivert®"], "concentration": {"Tabletas": "25 mg"}, "doses": {"Perros": [{"purpose": "Antiemético (cinetosis, trastornos vestibulares)", "dose_range_min": 25, "dose_range_rec": 25, "dose_range_max": 25, "unit": "mg/perro", "route": "PO", "frequency": "c/24h"}], "Gatos": [{"purpose": "Antiemético (cinetosis, trastornos vestibulares)", "dose_range_min": 12.5, "dose_range_rec": 12.5, "dose_range_max": 12.5, "unit": "mg/gato", "route": "PO", "frequency": "c/24h"}]}, "functions": "Antihistamínico de primera generación con propiedades antieméticas, principalmente para el vómito asociado al movimiento o a la enfermedad vestibular.", "recommendations": "Causa menos sedación que el dimenhidrinato. Administrar 30-60 minutos antes de viajar.", "precautions": "Puede causar sedación y efectos anticolinérgicos.", "contraindications": "Hipersensibilidad.", "interactions": {"summary": "Efectos sedantes aditivos con otros depresores del SNC.", "specifics": []}, "substitutes": ["Dimenhidrinato", "Maropitant"]},
            {"name": "Medetomidina HCl", "commercial_names": ["Domitor®"], "concentration": {"Solución Inyectable": "1 mg/mL"}, "doses": {"Perros": [{"purpose": "Sedante, preanestésico", "dose_range_min": 10, "dose_range_rec": 20, "dose_range_max": 40, "unit": "mcg/kg", "route": "IV, IM"}], "Gatos": [{"purpose": "Sedante, preanestésico", "dose_range_min": 50, "dose_range_rec": 100, "dose_range_max": 150, "unit": "mcg/kg", "route": "IM"}]}, "functions": "Agonista alfa-2 adrenérgico. Similar a la dexmedetomidina pero es una mezcla racémica (contiene la forma activa dexmedetomidina y la inactiva levomedetomidina).", "recommendations": "Ha sido mayormente reemplazada por la dexmedetomidina, que permite usar la mitad de la dosis para el mismo efecto con menos carga metabólica.", "precautions": "Causa efectos cardiovasculares significativos (bradicardia, hipotensión).", "contraindications": "Enfermedad cardiovascular o sistémica grave.", "interactions": {"summary": "Potencia el efecto de otros depresores del SNC.", "specifics": []}, "substitutes": ["Dexmedetomidina", "Xilazina"]},
            {"name": "Megestrol Acetato", "commercial_names": ["Ovaban®"], "concentration": {"Tabletas": "5 mg"}, "doses": {"Perros": [{"purpose": "Supresión del estro, tratamiento de pseudogestación", "dose_range_min": 0.55, "dose_range_rec": 1.1, "dose_range_max": 2.2, "unit": "mg/kg", "route": "PO"}], "Gatos": [{"purpose": "Dermatitis, supresión del estro, trastornos de comportamiento", "dose_range_min": 2.5, "dose_range_rec": 2.5, "dose_range_max": 5, "unit": "mg/gato", "route": "PO", "frequency": "Diario a días alternos"}]}, "functions": "Progestágeno sintético con potentes efectos progestacionales y antiestrogénicos. También tiene actividad glucocorticoide.", "recommendations": "Su uso ha disminuido drásticamente debido a su perfil de efectos secundarios graves. Existen alternativas mucho más seguras.", "precautions": "Puede causar hiperplasia endometrial quística/piometra, diabetes mellitus, hiperadrenocorticismo iatrogénico, aumento de peso y supresión adrenal.", "contraindications": "Gestación, enfermedad uterina, diabetes mellitus.", "interactions": {"summary": "No se han reportado interacciones.", "specifics": []}, "substitutes": ["Medroxiprogesterona (inyectable, similarmente riesgoso)", "Altrenogest"]},
            {"name": "Melarsomina", "commercial_names": ["Immiticide®", "Diroban®"], "concentration": {"Polvo para reconstituir": "50 mg"}, "doses": {"Perros": [{"purpose": "Adulticida para el tratamiento de la dirofilariasis (gusano del corazón)", "dose_range_min": 2.5, "dose_range_rec": 2.5, "dose_range_max": 2.5, "unit": "mg/kg", "route": "IM profunda (músculos lumbares)"}]}, "functions": "Compuesto arsenical. Es el único fármaco adulticida aprobado para el tratamiento de la infección por Dirofilaria immitis en perros.", "recommendations": "El tratamiento debe seguir el protocolo de la American Heartworm Society, que incluye una fase de pre-tratamiento (doxiciclina, preventivo) y un protocolo de 2 o 3 inyecciones. El reposo estricto es crucial después de las inyecciones para prevenir el tromboembolismo pulmonar.", "precautions": "La inyección es muy dolorosa y causa una reacción inflamatoria local severa. El principal riesgo del tratamiento es el tromboembolismo pulmonar por la muerte de los gusanos.", "contraindications": "Enfermedad del gusano del corazón Clase 4 (Síndrome de la Vena Cava). NO USAR EN GATOS.", "interactions": {"summary": "No se han reportado interacciones.", "specifics": []}, "substitutes": ["Protocolo de 'muerte lenta' con doxiciclina y preventivos macrólidos (menos eficaz, controvertido)"]},
            {"name": "Melatonina", "concentration": {"Tabletas": "3 mg", "Implante": "2.7 mg"}, "doses": {"Perros": [{"purpose": "Alopecia X, displasia folicular", "dose_range_min": 3, "dose_range_rec": 3, "dose_range_max": 6, "unit": "mg/perro", "route": "PO", "frequency": "c/12h"}, {"purpose": "Trastornos del sueño, ansiedad leve", "dose_range_min": 1, "dose_range_rec": 3, "dose_range_max": 6, "unit": "mg/perro", "route": "PO", "frequency": "Por la noche"}], "Hurones": [{"purpose": "Tratamiento y prevención de la enfermedad adrenal", "dose_range_min": 1, "dose_range_rec": 1, "dose_range_max": 1, "unit": "implante/hurón", "route": "SC", "frequency": "Cada 4 meses"}]}, "functions": "Hormona producida por la glándula pineal que regula los ciclos de sueño-vigilia y tiene efectos sobre el ciclo del pelo. En hurones, suprime la liberación de GnRH.", "recommendations": "Se utiliza para tratar ciertas alopecias no inflamatorias y para trastornos de ansiedad o del ciclo del sueño en perros geriátricos. En hurones, es una alternativa a la deslorelina.", "precautions": "Extremadamente seguro. El principal efecto secundario es la somnolencia.", "contraindications": "Ninguna significativa.", "interactions": {"summary": "Puede potenciar la sedación con otros fármacos.", "specifics": []}, "substitutes": ["Trilostano (para Alopecia X)", "Ansiolíticos (para ansiedad)", "Deslorelina (en hurones)"]},
            {"name": "Meloxicam", "commercial_names": ["Metacam®"], "concentration": {"Suspensión Oral": "1.5 mg/mL", "Solución Inyectable": "5 mg/mL"}, "doses": {"Perros": [{"purpose": "Dolor y inflamación (osteoartritis, postoperatorio)", "dose_range_min": 0.2, "dose_range_rec": 0.2, "dose_range_max": 0.2, "unit": "mg/kg (dosis inicial)", "route": "PO, SC", "frequency": "Dosis inicial el día 1, luego 0.1 mg/kg c/24h"}], "Gatos": [{"purpose": "Dolor postoperatorio", "dose_range_min": 0.3, "dose_range_rec": 0.3, "dose_range_max": 0.3, "unit": "mg/kg", "route": "SC", "frequency": "Dosis única preoperatoria"}, {"purpose": "Dolor crónico (osteoartritis)", "dose_range_min": 0.05, "dose_range_rec": 0.05, "dose_range_max": 0.1, "unit": "mg/kg", "route": "PO", "frequency": "c/24h (usar la dosis efectiva más baja)"}], "Aves": [{"purpose": "Analgésico/Antiinflamatorio", "dose_range_min": 0.5, "dose_range_rec": 1, "dose_range_max": 2, "unit": "mg/kg", "route": "PO, IM", "frequency": "c/12-24h"}], "Reptiles": [{"purpose": "Analgésico/Antiinflamatorio", "dose_range_min": 0.2, "dose_range_rec": 0.4, "dose_range_max": 0.5, "unit": "mg/kg", "route": "PO, IM", "frequency": "c/24-48h"}]}, "functions": "Antiinflamatorio no esteroideo (AINE) con acción preferencial sobre COX-2. Proporciona analgesia y reduce la inflamación.", "recommendations": "Uno de los AINEs más utilizados en una amplia variedad de especies. Administrar con comida.", "precautions": "Puede causar toxicidad gastrointestinal, renal y hepática. Usar con extrema cautela en gatos, especialmente para uso crónico, y solo a dosis muy bajas y en animales bien hidratados y con función renal normal.", "contraindications": "Hipersensibilidad, enfermedad GI, renal o hepática preexistente.", "interactions": {"summary": "Aumenta el riesgo de toxicidad con otros AINEs o corticosteroides.", "specifics": []}, "substitutes": ["Carprofeno", "Robenacoxib (aprobado en gatos)", "Gabapentina"]},
            {"name": "Melfalán", "commercial_names": ["Alkeran®"], "concentration": {"Tabletas": "2 mg"}, "doses": {"Perros": [{"purpose": "Quimioterapia (mieloma múltiple, tumores resistentes)", "dose_range_min": 0.1, "dose_range_rec": 0.1, "dose_range_max": 0.1, "unit": "mg/kg", "route": "PO", "frequency": "c/24h por 10-14 días, o 7 mg/m² c/24h por 5 días"}]}, "functions": "Agente alquilante antineoplásico. Es el fármaco de elección para el tratamiento del mieloma múltiple.", "recommendations": "Manejar con guantes. Monitorear hemogramas con frecuencia.", "precautions": "La principal toxicidad es la supresión de la médula ósea, que es retardada y acumulativa.", "contraindications": "Mielosupresión severa.", "interactions": {"summary": "Aumenta la mielosupresión con otros fármacos similares.", "specifics": []}, "substitutes": ["Ciclofosfamida"]},
            {"name": "Metadona HCl", "concentration": {"Solución Inyectable": "10 mg/mL"}, "doses": {"Perros": [{"purpose": "Analgésico para dolor severo, preanestésico", "dose_range_min": 0.1, "dose_range_rec": 0.5, "dose_range_max": 1, "unit": "mg/kg", "route": "IV, IM, SC", "frequency": "c/4h"}], "Gatos": [{"purpose": "Analgésico, preanestésico", "dose_range_min": 0.1, "dose_range_rec": 0.3, "dose_range_max": 0.5, "unit": "mg/kg", "route": "IV, IM, SC", "frequency": "c/4-6h"}]}, "functions": "Analgésico opioide sintético agonista puro (mu) con propiedades de antagonismo NMDA. Es una excelente opción para el dolor agudo y crónico, incluyendo el dolor neuropático.", "recommendations": "Causa menos vómitos que la morfina o la hidromorfona. Es una sustancia controlada.", "precautions": "Puede causar sedación, depresión respiratoria, jadeo y bradicardia. Puede causar disforia en algunos pacientes.", "contraindications": "Hipersensibilidad.", "interactions": {"summary": "Efectos sedantes aditivos con otros depresores del SNC.", "specifics": []}, "substitutes": ["Hidromorfona", "Morfina", "Fentanilo"]},
            {"name": "Metimazol", "commercial_names": ["Tapazole®", "Felimazole®"], "concentration": {"Tabletas": "5 mg"}, "doses": {"Gatos": [{"purpose": "Tratamiento médico del hipertiroidismo felino", "dose_range_min": 1.25, "dose_range_rec": 2.5, "dose_range_max": 5, "unit": "mg/gato", "route": "PO, Transdérmica (gel)", "frequency": "c/12-24h"}]}, "functions": "Fármaco antitiroideo. Inhibe la síntesis de hormonas tiroideas en la glándula tiroides.", "recommendations": "Es el tratamiento médico de elección para el hipertiroidismo felino. La dosis se ajusta según el monitoreo de los niveles de T4. La formulación transdérmica es una opción para gatos difíciles de medicar.", "precautions": "Puede causar vómitos, anorexia, letargo, trastornos sanguíneos (neutropenia, trombocitopenia), hepatotoxicidad y excoriaciones faciales por prurito.", "contraindications": "Hipersensibilidad, enfermedad hepática severa.", "interactions": {"summary": "No se han reportado interacciones significativas.", "specifics": []}, "substitutes": ["Carbimazol", "Yodo radioactivo (I-131)", "Dieta de prescripción baja en yodo"]},
            {"name": "Metocarbamol", "commercial_names": ["Robaxin-V®"], "concentration": {"Solución Inyectable": "100 mg/mL", "Tabletas": "500 mg"}, "doses": {"Perros": [{"purpose": "Relajante muscular (espasmos, intoxicación por permetrina/metaldehído)", "dose_range_min": 44, "dose_range_rec": 100, "dose_range_max": 150, "unit": "mg/kg", "route": "IV lenta", "frequency": "Administrar a efecto, no exceder 330 mg/kg/día"}], "Gatos": [{"purpose": "Relajante muscular (intoxicación por permetrina)", "dose_range_min": 44, "dose_range_rec": 100, "dose_range_max": 150, "unit": "mg/kg", "route": "IV lenta", "frequency": "Administrar a efecto"}]}, "functions": "Relajante del músculo esquelético de acción central. Se utiliza para tratar espasmos musculares asociados a traumatismos, hernias discales o ciertas intoxicaciones.", "recommendations": "Administrar por vía IV lenta. También disponible en tabletas para uso oral (15-20 mg/kg c/8h).", "precautions": "La administración IV rápida puede causar vómitos, salivación y ataxia. Puede causar sedación.", "contraindications": "Insuficiencia renal.", "interactions": {"summary": "Efectos sedantes aditivos con otros depresores del SNC.", "specifics": []}, "substitutes": ["Diazepam", "Midazolam"]},
            {"name": "Metoclopramida HCl", "commercial_names": ["Reglan®"], "concentration": {"Solución Inyectable": "5 mg/mL", "Tabletas": "10 mg"}, "doses": {"Perros": [{"purpose": "Antiemético, procinético", "dose_range_min": 0.2, "dose_range_rec": 0.3, "dose_range_max": 0.5, "unit": "mg/kg", "route": "PO, SC, IM, IV", "frequency": "c/6-8h"}, {"purpose": "Antiemético (infusión continua)", "dose_range_min": 1, "dose_range_rec": 1.5, "dose_range_max": 2, "unit": "mg/kg/día", "route": "IV"}], "Gatos": [{"purpose": "Antiemético, procinético", "dose_range_min": 0.2, "dose_range_rec": 0.3, "dose_range_max": 0.5, "unit": "mg/kg", "route": "PO, SC, IM", "frequency": "c/8h"}]}, "functions": "Antiemético de acción central (antagonista dopaminérgico) y procinético (aumenta la motilidad gástrica y del intestino delgado).", "recommendations": "Útil para vómitos asociados a estasis gástrica o quimioterapia. La infusión continua es más efectiva que los bolos intermitentes.", "precautions": "Puede causar cambios de comportamiento (excitación o sedación), especialmente en gatos. No usar si se sospecha obstrucción gastrointestinal.", "contraindications": "Obstrucción o perforación GI, hemorragia GI, feocromocitoma.", "interactions": {"summary": "No administrar con fenotiazinas por aumento de efectos extrapiramidales.", "specifics": []}, "substitutes": ["Maropitant", "Ondansetrón", "Cisaprida"]},
            {"name": "Metoprolol", "commercial_names": ["Lopressor®"], "concentration": {"Tabletas": "50 mg"}, "doses": {"Perros": [{"purpose": "Antiarrítmico (taquiarritmias supraventriculares)", "dose_range_min": 0.25, "dose_range_rec": 0.5, "dose_range_max": 1, "unit": "mg/kg", "route": "PO", "frequency": "c/8-12h"}], "Gatos": [{"purpose": "Cardiomiopatía hipertrófica", "dose_range_min": 2, "dose_range_rec": 2, "dose_range_max": 15, "unit": "mg/kg", "route": "PO", "frequency": "c/8-12h"}]}, "functions": "Betabloqueador cardioselectivo (beta-1), similar al atenolol.", "recommendations": "Alternativa al atenolol.", "precautions": "Puede causar bradicardia, letargo y empeorar la insuficiencia cardíaca congestiva.", "contraindications": "Insuficiencia cardíaca congestiva descompensada, bloqueo AV de alto grado.", "interactions": {"summary": "Efectos aditivos con otros fármacos que deprimen la función cardiaca.", "specifics": []}, "substitutes": ["Atenolol", "Diltiazem"]},
            {"name": "Metronidazol", "commercial_names": ["Flagyl®"], "concentration": {"Tabletas": "250 mg", "Solución Inyectable": "5 mg/mL"}, "doses": {"Perros": [{"purpose": "Diarrea responsiva a antibióticos, Giardia, infecciones por anaerobios", "dose_range_min": 10, "dose_range_rec": 15, "dose_range_max": 25, "unit": "mg/kg", "route": "PO", "frequency": "c/12h"}], "Gatos": [{"purpose": "Diarrea, Giardia, infecciones por anaerobios", "dose_range_min": 10, "dose_range_rec": 15, "dose_range_max": 25, "unit": "mg/kg", "route": "PO", "frequency": "c/12h"}], "Aves": [{"purpose": "Tricomoniasis, Giardiasis", "dose_range_min": 10, "dose_range_rec": 30, "dose_range_max": 50, "unit": "mg/kg", "route": "PO", "frequency": "c/12h"}], "Reptiles": [{"purpose": "Infecciones por protozoos anaerobios", "dose_range_min": 25, "dose_range_rec": 50, "dose_range_max": 100, "unit": "mg/kg", "route": "PO"}]}, "functions": "Antibiótico y antiprotozoario. Excelente actividad contra bacterias anaerobias y protozoos como Giardia, Trichomonas y Entamoeba.", "recommendations": "Su sabor es extremadamente amargo. Formular en cápsulas puede ayudar a la administración, especialmente en gatos.", "precautions": "Puede causar neurotoxicidad a dosis altas o en tratamientos prolongados (ataxia, nistagmo, convulsiones). También puede causar anorexia y vómitos. Es teratogénico.", "contraindications": "Gestación, enfermedad hepática severa.", "interactions": {"summary": "Puede interactuar con cimetidina y fenobarbital.", "specifics": []}, "substitutes": ["Fenbendazol (para Giardia)", "Clindamicina (para anaerobios)"]},
            {"name": "Midazolam HCl", "commercial_names": ["Versed®"], "concentration": {"Solución Inyectable": "5 mg/mL"}, "doses": {"Perros": [{"purpose": "Anticonvulsivo, preanestésico, sedante", "dose_range_min": 0.1, "dose_range_rec": 0.3, "dose_range_max": 0.5, "unit": "mg/kg", "route": "IV, IM, Intranasal"}], "Gatos": [{"purpose": "Anticonvulsivo, preanestésico, sedante", "dose_range_min": 0.1, "dose_range_rec": 0.3, "dose_range_max": 0.5, "unit": "mg/kg", "route": "IV, IM, Intranasal"}], "Aves": [{"purpose": "Sedante, anticonvulsivo", "dose_range_min": 0.5, "dose_range_rec": 1, "dose_range_max": 2, "unit": "mg/kg", "route": "IM, Intranasal"}]}, "functions": "Benzodiazepina de acción corta. Similar al diazepam, pero hidrosoluble, lo que permite una absorción IM fiable y la mezcla con otros fármacos.", "recommendations": "Excelente para la co-inducción anestésica (con propofol, ketamina, etc.), para la sedación en pacientes críticos y para el control de convulsiones por vía intranasal.", "precautions": "Puede causar agitación paradójica. Causa depresión respiratoria mínima, pero se potencia con otros depresores.", "contraindications": "Hipersensibilidad.", "interactions": {"summary": "Efectos sedantes aditivos con otros depresores del SNC.", "specifics": []}, "substitutes": ["Diazepam"]},
            {"name": "Milbemicina Oxima", "commercial_names": ["Interceptor®", "Sentinel®", "Trifexis®"], "concentration": {"Tabletas masticables": "Variable (combinada)"}, "doses": {"Perros": [{"purpose": "Prevención de dirofilariasis, tratamiento de parásitos internos", "dose_range_min": 0.5, "dose_range_rec": 0.5, "dose_range_max": 1, "unit": "mg/kg", "route": "PO", "frequency": "Mensual"}], "Gatos": [{"purpose": "Prevención de dirofilariasis, tratamiento de parásitos internos", "dose_range_min": 2, "dose_range_rec": 2, "dose_range_max": 2, "unit": "mg/kg", "route": "PO", "frequency": "Mensual"}]}, "functions": "Endectocida macrólido. Eficaz para la prevención del gusano del corazón y el tratamiento de nematodos gastrointestinales (gusanos redondos, anquilostomas, tricúridos) y ácaros (sarna demodécica y sarcóptica a dosis más altas).", "recommendations": "Presente en muchos preventivos mensuales populares.", "precautions": "Seguro en razas con mutación MDR1 a las dosis preventivas.", "contraindications": "Hipersensibilidad.", "interactions": {"summary": "No se han reportado interacciones significativas a las dosis recomendadas.", "specifics": []}, "substitutes": ["Ivermectina", "Moxidectina", "Selamectina"]}
        ].sort((a, b) => a.name.localeCompare(b.name));

        // --- NEW DATA STRUCTURES ---
        const physiologicalConstants = {
            'Perros': { 'Temp °C': '37.5-39.2', 'FC (lpm)': '60-140', 'FR (rpm)': '10-30', 'PAS (mmHg)': '90-140' },
            'Gatos': { 'Temp °C': '38.0-39.2', 'FC (lpm)': '140-220', 'FR (rpm)': '20-40', 'PAS (mmHg)': '80-130' },
            'Bovinos': { 'Temp °C': '38.0-39.5', 'FC (lpm)': '40-80', 'FR (rpm)': '10-30', 'PAS (mmHg)': '100-140' },
            'Equinos': { 'Temp °C': '37.5-38.5', 'FC (lpm)': '28-44', 'FR (rpm)': '8-16', 'PAS (mmHg)': '90-130' },
            'Conejos': { 'Temp °C': '38.5-40.0', 'FC (lpm)': '180-350', 'FR (rpm)': '30-60' },
            'Hurones': { 'Temp °C': '37.8-39.4', 'FC (lpm)': '180-250', 'FR (rpm)': '33-36' },
            'Cobayos': { 'Temp °C': '37.2-39.5', 'FC (lpm)': '230-380', 'FR (rpm)': '45-110' },
            'Psitácidas (promedio)': { 'Temp °C': '40.0-42.0', 'FC (lpm)': '250-600', 'FR (rpm)': '25-50' },
            'Iguanas': { 'Temp °C': '28.0-35.0 (gradiente)', 'FC (lpm)': '40-60', 'FR (rpm)': '10-20' },
        };

        const anestheticProtocols = [
            // --- PERROS ---
            { name: 'Perro Sano (ASA I/II) - Reversible', species: 'Perros', asa: 'I-II', premed: 'Dexmedetomidina (2-5 mcg/kg) + Butorfanol (0.2-0.4 mg/kg) IM.', induction: 'Propofol (2-4 mg/kg) o Alfaxalona (1-2 mg/kg) IV a efecto.', maintenance: 'Isoflurano / Sevoflurano.', notes: 'Buena sedación y analgesia, totalmente reversible con Atipamezol. Ideal para procedimientos de rutina.' },
            { name: 'Perro Sano (ASA I/II) - Opción Clásica', species: 'Perros', asa: 'I-II', premed: 'Acepromacina (0.02-0.05 mg/kg) + Buprenorfina (0.01-0.02 mg/kg) IM.', induction: 'Propofol (3-5 mg/kg) IV a efecto.', maintenance: 'Isoflurano.', notes: 'Buena sedación, pero no es reversible y puede causar hipotensión. Requiere buen monitoreo.' },
            { name: 'Perro Geriátrico/Débil (ASA III/IV)', species: 'Perros', asa: 'III-IV', premed: 'Midazolam (0.2-0.3 mg/kg) + Fentanilo (2-5 mcg/kg) IV lento.', induction: 'Etomidato (1-2 mg/kg) o Alfaxalona (1-2 mg/kg) IV. Alternativa: Propofol a dosis reducida (1-2 mg/kg) co-inducido con Midazolam.', maintenance: 'Isoflurano / Sevoflurano a la CAM más baja posible.', notes: 'Protocolo enfocado en la máxima estabilidad cardiovascular.' },
            { name: 'Perro para Cesárea', species: 'Perros', asa: 'II-III', premed: 'Bajo o nulo. Considerar opioide de acción corta (Fentanilo 2 mcg/kg IV) justo antes de la inducción.', induction: 'Propofol (3-6 mg/kg) o Alfaxalona (2-3 mg/kg) IV a efecto (rápido para minimizar depresión fetal).', maintenance: 'Isoflurano. Anestesia epidural es la mejor opción para la analgesia.', notes: 'El objetivo es minimizar la depresión de los cachorros. Tener equipo de reanimación neonatal (Naloxona, Doxapram) listo.' },
            { name: 'Perro Braquicéfalo', species: 'Perros', asa: 'II-III', premed: 'Maropitant (1 mg/kg) SC 1h antes. Butorfanol (0.2 mg/kg) + Midazolam (0.2 mg/kg) IM.', induction: 'Inducción rápida con Propofol (3-5 mg/kg) IV y asegurar vía aérea inmediatamente (intubación).', maintenance: 'Isoflurano / Sevoflurano.', notes: 'Pre-oxigenar por 5 minutos es crucial. Mantener intubado el mayor tiempo posible durante la recuperación.' },
            
            // --- GATOS ---
            { name: 'Gato Sano (ASA I/II) - "Kitty Magic" Mejorado', species: 'Gatos', asa: 'I-II', premed: 'Dexmedetomidina (5-10 mcg/kg) + Ketamina (3-5 mg/kg) + Buprenorfina (0.02 mg/kg) IM, todo en la misma jeringa.', induction: 'Puede no ser necesaria, o complementar com Propofol/Alfaxalona IV a efecto.', maintenance: 'Isoflurano / Sevoflurano.', notes: 'Excelente inmovilización y analgesia. Reversible (Atipamezol revierte Dexmedetomidina).' },
            { name: 'Gato Obstruido/Urgencia (ASA IV)', species: 'Gatos', asa: 'IV', premed: 'Butorfanol (0.2-0.4 mg/kg) + Midazolam (0.2 mg/kg) IM. Evitar α2-agonistas y Ketamina.', induction: 'Propofol (dosis bajas, 2-4 mg/kg) o Alfaxalona (1-2 mg/kg) IV. Anestesia epidural es altamente recomendada.', maintenance: 'Sevoflurano (rápida eliminación).', notes: 'Enfoque en estabilización primero. Corregir hiperkalemia y deshidratación antes de anestesiar.' },
            { name: 'Gato Agresivo para Sedación', species: 'Gatos', asa: 'I-II', premed: 'Gabapentina oral (100 mg/gato) 2-3 horas antes de la cita. En clínica: Tiletamina/Zolazepam (Zoletil®) (2-4 mg/kg) IM.', induction: 'N/A para sedación.', maintenance: 'N/A', notes: 'Zoletil proporciona una sedación profunda y rápida. La premedicación oral reduce el estrés.' },

            // --- GRANDES ESPECIES ---
            { name: 'Equino - Sedación de Campo', species: 'Equinos', asa: 'I-III', premed: 'Xilacina (0.5-1.1 mg/kg) IV o Detomidina (10-20 mcg/kg) IV. Esperar efecto máximo.', induction: 'Ketamina (2.2 mg/kg) + Diazepam o Midazolam (0.05-0.1 mg/kg) IV.', maintenance: 'Infusión de "Triple Gota": Guaifenesina 5% (50mg/mL) + Ketamina (2mg/mL) + Xilacina (0.5mg/mL) IV a ritmo de 1-2 mL/kg/hr.', notes: 'Protocolo de TIVA (Anestesia Total Intravenosa) muy común en campo para procedimientos de hasta 60 minutos.' },
            { name: 'Bovino - Sedación y Anestesia Local', species: 'Bovinos', asa: 'I-III', premed: 'Xilacina (0.05-0.1 mg/kg) IM. ¡Los bovinos son muy sensibles!', induction: 'Anestesia local infiltrativa o bloqueo regional (ej. Bloqueo paravertebral) con Lidocaína al 2%.', maintenance: 'N/A', notes: 'Para muchos procedimientos de campo (cirugía de flanco, etc.), la sedación profunda com anestesia local es suficiente y más segura que la anestesia general.' },
        ];
        const SEDATIVE_ANESTHETIC_DRUGS = [
            "Ketanil® (Ketamina 200 mg/mL)",
            "Ketovet (Ketamina)",
            "Kronamina Vet® (Dexmedetomidina)",
            "Xilacina al 10% (Clorhidrato de Xilacina)",
            "Zoletil 100 (Tiletamina + Zolazepam)"
        ];

        // --- Reusable Info Card Component (GLOBAL SCOPE) ---
        const InfoCard = ({ icon, title, color, children }) => {
            if (!children || (Array.isArray(children) && children.length === 0)) return null;
            const colorClasses = {
                red: 'border-red-500/50 bg-red-500/10 text-red-300',
                yellow: 'border-yellow-500/50 bg-yellow-500/10 text-yellow-300',
                blue: 'border-blue-500/50 bg-blue-500/10 text-blue-300',
                green: 'border-green-500/50 bg-green-500/10 text-green-300',
                purple: 'border-purple-500/50 bg-purple-500/10 text-purple-300',
                indigo: 'border-indigo-500/50 bg-indigo-500/10 text-indigo-300',
            };

            return (
                <div className={`p-3 rounded-lg border ${colorClasses[color]}`}>
                    <div className="flex items-center mb-1">
                        {icon}
                        <h3 className={`ml-2 font-bold text-xs uppercase tracking-wider text-${color}-400`}>{title}</h3>
                    </div>
                    <div className="text-gray-300 text-xs pl-6 prose prose-sm" dangerouslySetInnerHTML={{ __html: String(children).replace(/\n/g, '<br/>') }} />
                </div>
            );
        };
        
        // --- Reusable Medication Info Display (GLOBAL SCOPE) ---
        const MedicationInfo = ({ medData }) => {
            if(!medData) return null;
            const interactions = medData.interactions?.summary + (medData.interactions?.specifics?.map(i => `<br/>- ${i.drug}: ${i.effect}`).join('') || '');
             return(
                 <div className="pt-4 border-t border-slate-700">
                    <div className="grid grid-cols-1 sm:grid-cols-2 gap-3 text-sm">
                        <InfoCard icon={<Zap size={16} className="text-green-400"/>} title="Función" color="green">{medData.functions}</InfoCard>
                        <InfoCard icon={<Lightbulb size={16} className="text-blue-400"/>} title="Recomendaciones" color="blue">{medData.recommendations}</InfoCard>
                        <InfoCard icon={<AlertTriangle size={16} className="text-yellow-400"/>} title="Precauciones" color="yellow">{medData.precautions}</InfoCard>
                        <InfoCard icon={<Slash size={16} className="text-red-400"/>} title="Contraindicaciones" color="red">{medData.contraindications}</InfoCard>
                        <InfoCard icon={<Users size={16} className="text-purple-400"/>} title="Interacciones" color="purple">{interactions}</InfoCard>
                        <InfoCard icon={<Shuffle size={16} className="text-indigo-400"/>} title="Sustitutos" color="indigo">{medData.substitutes?.join(', ')}</InfoCard>
                    </div>
                </div>
            );
        }
        
        // --- TOOL and VIEW COMPONENTS (GLOBAL SCOPE) ---
        const InfoTooltip = ({ text }) => (
            <div className="tooltip ml-1">
                <HelpCircle size={14} className="text-gray-400" />
                <span className="tooltiptext">{text}</span>
            </div>
        );
        const EmergencyMode = ({ onExit }) => {
            const emergencyDrugs = [
                { name: 'Adrenalina (1 mg/mL)', dosePerKg: 0.01, unit: 'mL', concentration: 1, info: 'Para PCR o shock anafiláctico. Diluir si es posible.' },
                { name: 'Atropina (0.5 mg/mL)', dosePerKg: 0.04, unit: 'mL', concentration: 0.5, info: 'Para bradicardia severa. Dosis en mL es 0.04 x peso en kg.' },
                { name: 'Diazepam (5 mg/mL)', dosePerKg: 0.5, unit: 'mg', concentration: 5, info: 'Para estado epiléptico. Administrar IV lenta, no exceder 2 mg/min.' },
                { name: 'Lidocaína 2% (20 mg/mL)', dosePerKg: 2, unit: 'mg', concentration: 20, info: 'Para arritmias ventriculares. Usar bolo de 2 mg/kg, seguido de CRI.' },
                { name: 'Dexametasona (2 mg/mL)', dosePerKg: 0.25, unit: 'mg', concentration: 2, info: 'Para shock, trauma o edema cerebral. Dosis de shock es de 1-2 mg/kg IV.' },
                { name: 'Furosemida (50 mg/mL)', dosePerKg: 2, unit: 'mg', concentration: 50, info: 'Para edema pulmonar. Dosis de 2-4 mg/kg IV. Monitorear hidratación.' },
            ];
            const weightRanges = [[1, 5], [5, 10], [10, 20], [20, 40], [40, 60]];
            const [selectedDrug, setSelectedDrug] = React.useState(null);

            const calculateTable = (drug) => {
                return weightRanges.map(range => {
                    const avgWeight = (range[0] + range[1]) / 2;
                    let dose;
                    let finalDose;
                    if (drug.unit === 'mg') {
                        dose = (drug.dosePerKg * avgWeight);
                        finalDose = (dose / drug.concentration).toFixed(2) + ' mL';
                    } else {
                        dose = (drug.dosePerKg * avgWeight);
                        finalDose = (dose).toFixed(2) + ` ${drug.unit}`;
                    }
                    return { range: `${range[0]}-${range[1]} kg`, dose: finalDose };
                });
            };
            
            return (
                <div className="fixed inset-0 bg-red-900 text-white p-4 font-sans flex flex-col items-center z-50 overflow-y-auto">
                    <h1 className="text-4xl font-bold mb-4 animate-pulse">MODO EMERGENCIA</h1>
                    <div className="w-full max-w-2xl bg-slate-800 p-6 rounded-lg">
                        <div className="grid grid-cols-2 sm:grid-cols-3 gap-4 mb-6">
                            {emergencyDrugs.map(drug => (
                                <button key={drug.name} onClick={() => setSelectedDrug(drug)} className={`p-3 rounded-lg transition-colors ${selectedDrug?.name === drug.name ? 'bg-yellow-500 text-black' : 'bg-red-700 hover:bg-red-600'}`}>
                                    {drug.name}
                                </button>
                            ))}
                        </div>
                        {selectedDrug && (
                            <div>
                                <h2 className="text-2xl font-bold mb-2 text-yellow-400">{selectedDrug.name}</h2>
                                <p className="mb-4 text-sm font-normal text-gray-300">{selectedDrug.info}</p>
                                <table className="w-full text-left">
                                    <thead><tr className="bg-slate-700"><th className="p-2">Rango de Peso</th><th className="p-2">Dosis a Administrar</th></tr></thead>
                                    <tbody>{calculateTable(selectedDrug).map(row => (<tr key={row.range} className="border-b border-slate-600"><td className="p-2">{row.range}</td><td className="p-2 font-bold">{row.dose}</td></tr>))}</tbody>
                                </table>
                            </div>
                        )}
                    </div>
                    <button onClick={onExit} className="mt-6 px-6 py-2 bg-slate-700 rounded-lg hover:bg-slate-600">Salir de Modo Emergencia</button>
                </div>
            );
        };
        const HistoryModal = ({ history, onClose, onRestore }) => {
            return (
                <div className="fixed inset-0 bg-slate-900 bg-opacity-75 z-50 flex justify-center items-center p-4">
                    <div className="bg-slate-800 rounded-lg shadow-xl w-full max-w-2xl p-6 h-[90vh] flex flex-col">
                        <div className="flex justify-between items-center mb-4">
                            <h2 className="text-2xl font-bold text-white">Historial de Dosis (Últimas 10)</h2>
                            <button onClick={onClose} className="p-2 text-gray-400 hover:text-white"><X size={24} /></button>
                        </div>
                        <ul className="space-y-3 overflow-y-auto flex-grow pr-2">
                            {history.length > 0 ? history.map(entry => (
                                <li key={entry.id} className="bg-slate-700/50 p-3 rounded-lg">
                                    <div className="flex justify-between items-center">
                                        <div>
                                            <p className="font-bold text-white">{entry.patient.name} <span className="text-sm font-normal text-gray-400">({entry.patient.species}, {entry.patient.weight}kg)</span></p>
                                            <p className="text-xs text-gray-300 mt-1 truncate">{entry.medications.map(med => med.name.split('(')[0].trim()).join(', ')}</p>
                                            <p className="text-xs text-gray-400">{entry.timestamp}</p>
                                        </div>
                                        <button onClick={() => onRestore(entry)} className="p-2 text-blue-400 hover:text-white" title="Restaurar datos"><PlusCircle size={20}/></button>
                                    </div>
                                </li>
                            )) : <p className="text-center text-gray-400">No hay dosis guardadas.</p>}
                        </ul>
                    </div>
                </div>
            )
        };
        const InfoModal = ({ title, onClose, children }) => {
            return (
                <div className="fixed inset-0 bg-slate-900 bg-opacity-75 z-[100] flex justify-center items-center p-4">
                    <div className="bg-slate-800 rounded-lg shadow-xl w-full max-w-lg p-6 relative">
                        <div className="flex justify-between items-center mb-4">
                            <h2 className="text-2xl font-bold text-white">{title}</h2>
                            <button onClick={onClose} className="p-2 text-gray-400 hover:text-white"><X size={24} /></button>
                        </div>
                        <div className="prose prose-invert max-w-none text-gray-300">
                           {children}
                        </div>
                    </div>
                </div>
            );
        };
        const FluidTherapyCalculator = ({ onClose }) => {
             const [state, setState] = React.useState({ weight: '', dehydration: 5, maintenance: 60, losses: 0, dripFactor: 20 });
             const [showInfo, setShowInfo] = React.useState(false);

            const handleChange = e => {
                setState(prevState => ({ ...prevState, [e.target.name]: e.target.value }));
            };

            const { weight, dehydration, maintenance, losses, dripFactor } = state;
            const weightNum = parseFloat(weight) || 0;
            const dehydrationNum = parseFloat(dehydration) || 0;
            const maintenanceNum = parseFloat(maintenance) || 0;
            const lossesNum = parseFloat(losses) || 0;
            const dripFactorNum = parseFloat(dripFactor) || 0;

            const rehydrationMl = weightNum * dehydrationNum * 10;
            const maintenanceMl = weightNum * maintenanceNum;
            const totalMlDay = rehydrationMl + maintenanceMl + lossesNum;
            const rateMlHr = totalMlDay / 24;
            const rateGtsMin = (totalMlDay * dripFactorNum) / 1440; // 24 * 60
            
            return (
                <div className="fixed inset-0 bg-slate-900 bg-opacity-75 z-50 flex justify-center items-center p-4">
                    {showInfo && <InfoModal title="Información General de Fluidoterapia" onClose={() => setShowInfo(false)}>
                        <h3>¿Qué es?</h3>
                        <p>Es una de las terapias más importantes en medicina veterinaria, usada para corregir deshidratación, mantener la hidratación, reponer electrolitos y administrar medicamentos.</p>
                        <h3>¿Cuándo usarla?</h3>
                        <p>En pacientes deshidratados, en shock, anoréxicos, con vómitos/diarrea, durante y después de cirugías, o con enfermedades renales.</p>
                        <h3>Fórmulas Clave:</h3>
                        <ul>
                            <li><strong>Déficit (Rehidratación):</strong> <code>Peso (kg) * % Deshidratación * 10</code></li>
                            <li><strong>Mantenimiento:</strong> <code>Peso (kg) * Tasa (mL/kg/día)</code></li>
                              <li><strong>Total 24h:</strong> <code>Déficit + Mantenimiento + Pérdidas</code></li>
                        </ul>
                    </InfoModal>}
                    <div className="bg-slate-700 rounded-lg shadow-xl w-full max-w-2xl p-6">
                        <div className="flex justify-between items-center mb-4">
                            <h2 className="text-2xl font-bold text-white">Calculadora de Fluidoterapia</h2>
                            <div className="flex items-center gap-2">
                               <button onClick={() => setShowInfo(true)} className="p-2 text-gray-400 hover:text-white"><HelpCircle size={24} /></button>
                               <button onClick={onClose} className="p-2 text-gray-400 hover:text-white"><X size={24} /></button>
                            </div>
                        </div>
                        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                            <div>
                                <label className="flex items-center text-sm font-bold text-gray-300 mb-1">Peso (kg) <InfoTooltip text="Peso actual del paciente en kilogramos." /></label>
                                <input type="number" name="weight" value={weight} onChange={handleChange} className="w-full p-2 bg-slate-600 rounded-md" />
                            </div>
                            <div>
                                <label className="flex items-center text-sm font-bold text-gray-300 mb-1">% Deshidratación <InfoTooltip text="Estimación clínica. 5% leve (mucosas pegajosas), 8% moderada (ojos hundidos), 10%+ severa (shock)." /></label>
                                <input type="number" name="dehydration" value={dehydration} onChange={handleChange} className="w-full p-2 bg-slate-600 rounded-md" />
                            </div>
                            <div>
                                <label className="flex items-center text-sm font-bold text-gray-300 mb-1">Mantenimiento (mL/kg/día) <InfoTooltip text="Tasa estándar para cubrir necesidades diarias. Común: 40-60 mL/kg/día." /></label>
                                <input type="number" name="maintenance" value={maintenance} onChange={handleChange} className="w-full p-2 bg-slate-600 rounded-md" />
                            </div>
                            <div>
                                <label className="flex items-center text-sm font-bold text-gray-300 mb-1">Pérdidas Anormales (mL/día) <InfoTooltip text="Estimar volumen perdido por vómito, diarrea, etc., en 24h." /></label>
                                <input type="number" name="losses" value={losses} onChange={handleChange} className="w-full p-2 bg-slate-600 rounded-md" />
                            </div>
                             <div>
                                <label className="flex items-center text-sm font-bold text-gray-300 mb-1">Factor Gotero (gts/mL) <InfoTooltip text="Factor de goteo del equipo de venoclisis (micro=60, macro=10, 15, o 20)." /></label>
                                <select name="dripFactor" value={dripFactor} onChange={handleChange} className="w-full p-2 bg-slate-600 rounded-md">
                                    <option value="10">10 (Macrogoteo)</option>
                                    <option value="15">15 (Macrogoteo)</option>
                                    <option value="20">20 (Macrogoteo)</option>
                                    <option value="60">60 (Microgoteo)</option>
                                </select>
                            </div>
                        </div>
                         {weightNum > 0 && <div className="mt-6 p-4 bg-slate-800 rounded-lg">
                            <h3 className="text-lg font-bold text-green-400 mb-2">Resultados:</h3>
                            <p>Rehidratación: <strong>{rehydrationMl.toFixed(2)} mL</strong></p>
                            <p>Mantenimiento: <strong>{maintenanceMl.toFixed(2)} mL</strong></p>
                            <p>Pérdidas: <strong>{lossesNum.toFixed(2)} mL</strong></p>
                            <p className="mt-2 text-xl">Total 24h: <strong className="text-yellow-400">{totalMlDay.toFixed(2)} mL</strong></p>
                            <p className="mt-2 text-xl">Tasa de infusión: <strong className="text-yellow-400">{rateMlHr.toFixed(2)} mL/hr</strong></p>
                            <p className="mt-2 text-xl">Gotas: <strong className="text-yellow-400">{rateGtsMin.toFixed(2)} gts/min</strong> (~1 gota cada {rateGtsMin > 0 ? (60/rateGtsMin).toFixed(1) : 0} seg)</p>
                        </div>}
                    </div>
                </div>
            );
        };
        const BSACalculator = ({ onClose }) => {
            const [state, setState] = React.useState({ weight: '', species: 'Perros' });
            const [showInfo, setShowInfo] = React.useState(false);

            const handleChange = e => setState(prevState => ({...prevState, [e.target.name]: e.target.value}));

            const weightNum = parseFloat(state.weight) || 0;
            let bsa = 0;
            if(weightNum > 0){
                const k = state.species === 'Perros' ? 10.1 : 10.0;
                bsa = (k * Math.pow(weightNum * 1000, 2/3)) / 10000;
            }

            return (
                 <div className="fixed inset-0 bg-slate-900 bg-opacity-75 z-50 flex justify-center items-center p-4">
                     {showInfo && <InfoModal title="Superficie Corporal (BSA)" onClose={() => setShowInfo(false)}>
                        <h3>¿Qué es?</h3>
                        <p>La Superficie Corporal (BSA, por sus siglas en inglés) es una medida del área de superficie del cuerpo. Se utiliza para dosificar fármacos cuya eficacia y toxicidad se correlacionan mejor con el área metabólica que con el peso, como los agentes quimioterapéuticos.</p>
                        <h3>¿Cuándo usarla?</h3>
                        <p>Principalmente para calcular dosis de quimioterapia. Algunas dosis de otros fármacos también se expresan en mg/m².</p>
                        <h3>Fórmula:</h3>
                        <p><code>BSA (m²) = (K * Peso(g)^(2/3)) / 10,000</code></p>
                        <ul>
                            <li><strong>K (Constante):</strong> Varía por especie. Usualmente 10.1 para perros y 10.0 para gatos.</li>
                        </ul>
                    </InfoModal>}
                    <div className="bg-slate-700 rounded-lg shadow-xl w-full max-w-lg p-6">
                        <div className="flex justify-between items-center mb-4">
                            <h2 className="text-2xl font-bold text-white">Calculadora de Superficie Corporal</h2>
                             <div className="flex items-center gap-2">
                                <button onClick={() => setShowInfo(true)} className="p-2 text-gray-400 hover:text-white"><HelpCircle size={24} /></button>
                                <button onClick={onClose} className="p-2 text-gray-400 hover:text-white"><X size={24} /></button>
                            </div>
                        </div>
                         <div className="grid grid-cols-2 gap-4">
                            <div>
                               <label className="flex items-center text-sm font-bold text-gray-300 mb-1">Especie <InfoTooltip text="La constante 'K' en la fórmula varía ligeramente entre perros y gatos." /></label>
                               <select name="species" value={state.species} onChange={handleChange} className="w-full p-2 bg-slate-600 rounded-md">
                                   <option value="Perros">Perro</option>
                                   <option value="Gatos">Gato</option>
                               </select>
                            </div>
                            <div>
                               <label className="flex items-center text-sm font-bold text-gray-300 mb-1">Peso (kg) <InfoTooltip text="Peso actual del paciente en kilogramos." /></label>
                               <input type="number" name="weight" value={state.weight} onChange={handleChange} className="w-full p-2 bg-slate-600 rounded-md" />
                            </div>
                        </div>
                        {weightNum > 0 && <div className="mt-6 p-4 bg-slate-800 rounded-lg text-center">
                            <h3 className="text-lg font-bold text-green-400">BSA Calculada:</h3>
                            <p className="text-3xl font-bold text-yellow-400">{bsa.toFixed(2)} m²</p>
                        </div>}
                    </div>
                </div>
            );
        };
        const CRICalculator = ({ onClose }) => {
             const [state, setState] = React.useState({ weight: '', dose: '', doseUnit: 'mcg/kg/min', concentration: '', fluidRate: '', fluidVolume: 1000 });
             const [showInfo, setShowInfo] = React.useState(false);

            const handleChange = e => setState(prevState => ({ ...prevState, [e.target.name]: e.target.value }));

            const weightNum = parseFloat(state.weight) || 0;
            const doseNum = parseFloat(state.dose) || 0;
            const concentrationNum = parseFloat(state.concentration) || 0;
            const fluidRateNum = parseFloat(state.fluidRate) || 0;
            const fluidVolumeNum = parseFloat(state.fluidVolume) || 0;
            
            let drugMlToAdd = 0;
            if(weightNum > 0 && doseNum > 0 && concentrationNum > 0 && fluidRateNum > 0){
                let doseInMgKgHr = doseNum;
                if(state.doseUnit === 'mcg/kg/min') doseInMgKgHr = (doseNum * 60) / 1000;
                if(state.doseUnit === 'mcg/kg/hr') doseInMgKgHr = doseNum / 1000;
                
                const hoursOfFluid = fluidVolumeNum / fluidRateNum;
                const totalDrugMg = doseInMgKgHr * weightNum * hoursOfFluid;
                drugMlToAdd = totalDrugMg / concentrationNum;
            }

            return (
                 <div className="fixed inset-0 bg-slate-900 bg-opacity-75 z-50 flex justify-center items-center p-4">
                      {showInfo && <InfoModal title="Infusión a Ritmo Constante (CRI)" onClose={() => setShowInfo(false)}>
                        <h3>¿Qué es?</h3>
                        <p>Una CRI administra un fármaco de forma continua en los fluidos intravenosos para mantener niveles sanguíneos constantes.</p>
                          <h3>¿Cuándo usarla?</h3>
                          <p>Es ideal para analgésicos (lidocaína, fentanilo, ketamina), anestésicos (propofol) o fármacos que requieren un efecto sostenido y controlado.</p>
                        <h3>Fórmula Clave:</h3>
                        <p><code>Volumen a añadir (mL) = (Dosis * Peso * Duración Bolsa) / Concentración Fármaco</code></p>
                        <p>La calculadora convierte todas las unidades para simplificar el proceso.</p>
                    </InfoModal>}
                    <div className="bg-slate-700 rounded-lg shadow-xl w-full max-w-2xl p-6">
                         <div className="flex justify-between items-center mb-4">
                            <h2 className="text-2xl font-bold text-white">Calculadora de CRI</h2>
                            <div className="flex items-center gap-2">
                                <button onClick={() => setShowInfo(true)} className="p-2 text-gray-400 hover:text-white"><HelpCircle size={24} /></button>
                                <button onClick={onClose} className="p-2 text-gray-400 hover:text-white"><X size={24} /></button>
                            </div>
                        </div>
                        <div className="grid grid-cols-2 md:grid-cols-3 gap-4">
                            <div><label className="flex items-center text-sm font-bold text-gray-300 mb-1">Peso (kg) <InfoTooltip text="Peso actual del paciente en kilogramos." /></label><input type="number" name="weight" value={state.weight} onChange={handleChange} className="w-full p-2 bg-slate-600 rounded-md" /></div>
                            <div>
                                <label className="flex items-center text-sm font-bold text-gray-300 mb-1">Dosis Fármaco <InfoTooltip text="La dosis deseada del fármaco en las unidades especificadas por hora o minuto." /></label>
                                <div className="flex">
                                    <input type="number" name="dose" value={state.dose} onChange={handleChange} className="w-2/3 p-2 bg-slate-600 rounded-l-md" />
                                    <select name="doseUnit" value={state.doseUnit} onChange={handleChange} className="w-1/3 p-2 bg-slate-500 rounded-r-md text-xs">
                                        <option value="mcg/kg/min">mcg/kg/min</option>
                                        <option value="mcg/kg/hr">mcg/kg/hr</option>
                                        <option value="mg/kg/hr">mg/kg/hr</option>
                                    </select>
                                </div>
                            </div>
                             <div><label className="flex items-center text-sm font-bold text-gray-300 mb-1">Conc. Fármaco (mg/mL) <InfoTooltip text="Concentración del fármaco en su vial original (ej. Lidocaína 2% = 20 mg/mL)." /></label><input type="number" name="concentration" value={state.concentration} onChange={handleChange} className="w-full p-2 bg-slate-600 rounded-md" /></div>
                             <div><label className="flex items-center text-sm font-bold text-gray-300 mb-1">Tasa Fluidos (mL/hr) <InfoTooltip text="La velocidad a la que se infundirán los fluidos al paciente (ej. 2x Mantenimiento)." /></label><input type="number" name="fluidRate" value={state.fluidRate} onChange={handleChange} className="w-full p-2 bg-slate-600 rounded-md" /></div>
                             <div><label className="flex items-center text-sm font-bold text-gray-300 mb-1">Volumen Bolsa (mL) <InfoTooltip text="Volumen total de la bolsa de fluidos a la que se añadirá el fármaco (ej. 100, 250, 500, 1000 mL)." /></label><input type="number" name="fluidVolume" value={state.fluidVolume} onChange={handleChange} className="w-full p-2 bg-slate-600 rounded-md" /></div>
                        </div>
                        {drugMlToAdd > 0 && <div className="mt-6 p-4 bg-slate-800 rounded-lg text-center">
                            <h3 className="text-lg font-bold text-green-400">Resultado:</h3>
                            <p className="text-xl">Añadir <strong className="text-yellow-400">{drugMlToAdd.toFixed(2)} mL</strong> de fármaco a la bolsa de <strong>{fluidVolumeNum} mL</strong>.</p>
                        </div>}
                    </div>
                </div>
            );
        };
        const DilutionCalculator = ({ onClose }) => {
            const [state, setState] = React.useState({ c1: '', v2: '', c2: '' });
            const [showInfo, setShowInfo] = React.useState(false);

            const handleChange = e => setState(prevState => ({ ...prevState, [e.target.name]: e.target.value }));
            
            const c1 = parseFloat(state.c1) || 0;
            const v2 = parseFloat(state.v2) || 0;
            const c2 = parseFloat(state.c2) || 0;
            
            let v1 = 0;
            if(c1 > 0 && v2 > 0 && c2 > 0){
                v1 = (c2 * v2) / c1;
            }

            return (
                <div className="fixed inset-0 bg-slate-900 bg-opacity-75 z-50 flex justify-center items-center p-4">
                    {showInfo && <InfoModal title="Diluciones (C1V1=C2V2)" onClose={() => setShowInfo(false)}>
                        <h3>¿Qué es?</h3>
                        <p>Esta calculadora utiliza la fórmula universal de dilución para determinar el volumen de una solución madre (V1) necesario para preparar una solución final de una concentración y volumen deseados.</p>
                        <h3>¿Cuándo usarla?</h3>
                        <p>Siempre que necesites preparar una solución menos concentrada a partir de una más concentrada. Ej: preparar una solución de Dexametasona al 0.5% a partir de un vial al 2%.</p>
                        <h3>Fórmula:</h3>
                        <p><code>V1 = (C2 * V2) / C1</code></p>
                         <p><strong>Importante:</strong> Las unidades de concentración (C1 y C2) deben ser las mismas (ej. mg/mL, %). Las unidades de volumen (V1 y V2) también serán las mismas.</p>
                    </InfoModal>}
                    <div className="bg-slate-700 rounded-lg shadow-xl w-full max-w-lg p-6">
                        <div className="flex justify-between items-center mb-4">
                            <h2 className="text-2xl font-bold text-white">Calculadora de Diluciones</h2>
                             <div className="flex items-center gap-2">
                                <button onClick={() => setShowInfo(true)} className="p-2 text-gray-400 hover:text-white"><HelpCircle size={24} /></button>
                                <button onClick={onClose} className="p-2 text-gray-400 hover:text-white"><X size={24} /></button>
                            </div>
                        </div>
                        <div className="grid grid-cols-1 gap-4">
                            <div><label className="flex items-center text-sm font-bold text-gray-300 mb-1">Concentración Inicial (C1) <InfoTooltip text="Concentración de la solución que tienes disponible (solución madre)." /></label><input type="number" name="c1" value={state.c1} onChange={handleChange} className="w-full p-2 bg-slate-600 rounded-md" placeholder="Ej: 50 (mg/mL o %)" /></div>
                            <div><label className="flex items-center text-sm font-bold text-gray-300 mb-1">Volumen Final Deseado (V2) <InfoTooltip text="Volumen total que necesitas preparar de la nueva solución." /></label><input type="number" name="v2" value={state.v2} onChange={handleChange} className="w-full p-2 bg-slate-600 rounded-md" placeholder="Ej: 100 (mL)" /></div>
                            <div><label className="flex items-center text-sm font-bold text-gray-300 mb-1">Concentración Final Deseada (C2) <InfoTooltip text="Concentración que quieres obtener en tu nueva solución." /></label><input type="number" name="c2" value={state.c2} onChange={handleChange} className="w-full p-2 bg-slate-600 rounded-md" placeholder="Ej: 5 (mg/mL o %)" /></div>
                        </div>
                        {v1 > 0 && <div className="mt-6 p-4 bg-slate-800 rounded-lg text-center">
                            <h3 className="text-lg font-bold text-green-400">Resultado (V1):</h3>
                            <p className="text-xl">Tome <strong className="text-yellow-400">{v1.toFixed(2)} mL</strong> de la solución inicial y aforar a <strong>{v2} mL</strong>.</p>
                        </div>}
                    </div>
                </div>
            );
        };
        const ToolsMenu = ({ onSelect }) => (
            <div className="bg-slate-900 p-6 rounded-3xl shadow-xl border border-gray-700">
                <h2 className="text-xl font-bold mb-4 text-white text-center">Herramientas y Referencias</h2>
                <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
                    <button onClick={() => onSelect('addMed')} className="flex flex-col items-center p-4 bg-teal-800/50 rounded-lg hover:bg-teal-700/50 transition-colors col-span-2 md:col-span-4"><FlaskConical className="mb-2 text-teal-400"/>Añadir Fármaco</button>
                    <button onClick={() => onSelect('vademecum')} className="flex flex-col items-center p-4 bg-slate-800 rounded-lg hover:bg-slate-700 transition-colors"><BookOpen className="mb-2 text-blue-400"/>Vademécum</button>
                    <button onClick={() => onSelect('constants')} className="flex flex-col items-center p-4 bg-slate-800 rounded-lg hover:bg-slate-700 transition-colors"><HeartPulse className="mb-2 text-red-400"/>Constantes</button>
                    <button onClick={() => onSelect('fluid')} className="flex flex-col items-center p-4 bg-slate-800 rounded-lg hover:bg-slate-700 transition-colors"><Droplet className="mb-2 text-cyan-400"/>Fluidoterapia</button>
                    <button onClick={() => onSelect('bsa')} className="flex flex-col items-center p-4 bg-slate-800 rounded-lg hover:bg-slate-700 transition-colors"><Square className="mb-2 text-purple-400"/>Sup. Corporal</button>
                    <button onClick={() => onSelect('cri')} className="flex flex-col items-center p-4 bg-slate-800 rounded-lg hover:bg-slate-700 transition-colors"><Calculator className="mb-2 text-green-400"/>CRI</button>
                    <button onClick={() => onSelect('dilution')} className="flex flex-col items-center p-4 bg-slate-800 rounded-lg hover:bg-slate-700 transition-colors"><Beaker className="mb-2 text-indigo-400"/>Diluciones</button>
                    <button onClick={() => onSelect('protocols')} className="flex flex-col items-center p-4 bg-slate-800 rounded-lg hover:bg-slate-700 transition-colors col-span-2"><Siren className="mb-2 text-yellow-400"/>Protocolos Anest.</button>
                </div>
            </div>
        );
        
        // --- Main App Component ---
        const DosisApp = () => {
          // --- STATE MANAGEMENT ---
          const [activeView, setActiveView] = React.useState('calculator');
          const [patient, setPatient] = React.useState({ name: '', species: '', subSpecies: '', weight: '' });
          const [medications, setMedications] = React.useState([]);
          const [dosisHistory, setDosisHistory] = React.useState([]);
          const [showHistory, setShowHistory] = React.useState(false);
          const [speciesList, setSpeciesList] = React.useState([]);
          const [notification, setNotification] = React.useState(null);
          const [interactionWarning, setInteractionWarning] = React.useState(null);
          const [userAddedMeds, setUserAddedMeds] = React.useState(() => {
                try {
                    const saved = localStorage.getItem('dosisPerronasUserMeds');
                    return saved ? JSON.parse(saved) : [];
                } catch (e) {
                    return [];
                }
            });

            const allMedications = React.useMemo(() => {
                return [...initialMedications, ...userAddedMeds].sort((a, b) => a.name.localeCompare(b.name));
            }, [userAddedMeds]);

            React.useEffect(() => {
                localStorage.setItem('dosisPerronasUserMeds', JSON.stringify(userAddedMeds));
            }, [userAddedMeds]);
            
            const handleUpdateUserMed = (updatedMed) => {
                setUserAddedMeds(prevMeds => {
                    const isInitialMed = initialMedications.some(m => m.name === updatedMed.name);
                    const existingIndex = prevMeds.findIndex(med => med.name === updatedMed.name);
                    if (existingIndex > -1) {
                        const newMeds = [...prevMeds];
                        newMeds[existingIndex] = updatedMed;
                        return newMeds;
                    } else if (isInitialMed) {
                        return [...prevMeds, updatedMed];
                    }
                     return [...prevMeds, updatedMed];
                });
                showNotification(`Cambios en "${updatedMed.name.split('(')[0]}" guardados en tu vademécum.`, 'success');
            };

            const handleAddNewMedication = (newMed) => {
                setUserAddedMeds(prev => [...prev, newMed]);
                showNotification(`${newMed.name} ha sido añadido a tu vademécum personal.`, 'success');
                setActiveView('calculator');
            };
          
           const [favorites, setFavorites] = React.useState(() => {
                try {
                    const saved = localStorage.getItem('dosisPerronasFavorites');
                    return saved ? JSON.parse(saved) : [];
                } catch (e) {
                    return [];
                }
            });

            React.useEffect(() => {
                localStorage.setItem('dosisPerronasFavorites', JSON.stringify(favorites));
            }, [favorites]);

            const toggleFavorite = (medName) => {
                let newFavorites;
                if (favorites.includes(medName)) {
                    newFavorites = favorites.filter(name => name !== medName);
                } else {
                    newFavorites = [...favorites, medName];
                }
                setFavorites(newFavorites);
                showNotification(favorites.includes(medName) ? `${medName.split('(')[0].trim()} eliminado de favoritos.` : `${medName.split('(')[0].trim()} añadido a favoritos.`, 'info');
            };

            const addMedication = React.useCallback(() => {
             setMedications(prevMeds => [...prevMeds, { id: Date.now(), selectedMed: null, selectedPresentation: '', concentration: '', selectedPurposeIndex: 0, customRecDose: '', selectedDoseType: null }]);
            }, []);

          React.useEffect(() => {
              addMedication();
              try {
                  const savedHistory = localStorage.getItem('dosisPerronasHistory');
                  if (savedHistory) { setDosisHistory(JSON.parse(savedHistory)); }
              } catch (error) { console.error("Error loading history:", error); }
          }, []);

          React.useEffect(() => {
              try {
                  localStorage.setItem('dosisPerronasHistory', JSON.stringify(dosisHistory));
              } catch (error) { console.error("Error saving history:", error); }
          }, [dosisHistory]);
          
          const speciesEmojis = { 'Perros': '🐶', 'Gatos': '🐱', 'Bovinos': '🐮', 'Equinos': '🐴', 'Ovinos': '🐑', 'Caprinos': '🐐', 'Porcinos': '🐷', 'Aves': '🐔', 'Conejos': '🐰', 'Reptiles': '🐍', 'Anfibios': '🐸', 'Exóticos': '🐾', 'Pequeños Mamíferos': '🐹', 'Hurones': '🐾'};
          
          React.useEffect(() => {
            const rawSpecies = allMedications.flatMap(m => m.doses ? Object.keys(m.doses) : []);
            const unifiedSpecies = new Set(rawSpecies);
            
            const speciesOrder = ['Perros', 'Gatos', 'Equinos', 'Bovinos', 'Porcinos', 'Ovinos', 'Caprinos', 'Conejos', 'Aves', 'Reptiles', 'Anfibios'];
            const sortedSpecies = speciesOrder.filter(s => unifiedSpecies.has(s));
            setSpeciesList(sortedSpecies);
          }, [allMedications]);

          const exoticSpeciesMap = React.useMemo(() => {
              const map = {};
              allMedications.forEach(med => {
                  if (med.doses) {
                      Object.keys(med.doses).forEach(speciesKey => {
                          const categoryMatch = speciesKey.match(/Aves|Reptiles|Conejos|Anfibios|Pequeños Mamíferos/);
                          if (categoryMatch) {
                              const category = categoryMatch[0];
                              if (!map[category]) map[category] = new Set();
                              if (Array.isArray(med.doses[speciesKey])) {
                                  med.doses[speciesKey].forEach(speciesDose => {
                                      if (speciesDose.species) {
                                        map[category].add(speciesDose.species);
                                      } else {
                                        if(!map[category].has(speciesKey)) map[category].add(speciesKey);
                                      }
                                  });
                              }
                          }
                      });
                  }
              });
               Object.keys(map).forEach(category => {
                    map[category] = Array.from(map[category]).sort();
                });
              return map;
          }, [allMedications]);

        React.useEffect(() => {
           setInteractionWarning(null);
        }, [medications]);

            const showNotification = (message, type = 'info') => {
                setNotification({ message, type, id: Date.now() });
                setTimeout(() => setNotification(null), 3000);
            };
            
             const getDoseOptions = (med, species, subSpecies) => {
                if (!med || !med.doses) return [];
                if (med.doses[species] && !subSpecies) {
                    return med.doses[species];
                }
                if (subSpecies && med.doses[species]) {
                     return med.doses[species].filter(d => d.species === subSpecies);
                } else if (subSpecies && med.doses[subSpecies]){
                     return med.doses[subSpecies];
                }
                return [];
            };

            const handlePatientChange = (e) => {
                const { name, value } = e.target;
                 if (name === 'species' && value !== patient.species) {
                     setMedications([{ id: Date.now(), selectedMed: null, selectedPresentation: '', concentration: '', selectedPurposeIndex: 0, customRecDose: '', selectedDoseType: null }]); 
                     setPatient(prev => ({ ...prev, species: value, subSpecies: '' }));
                 } else {
                    setPatient(prev => ({ ...prev, [name]: value }));
                 }
            };

            const handleMedicationUpdate = (index, field, value) => {
                    const updatedMedications = [...medications];
                    let currentMed = { ...updatedMedications[index] };

                    if (field === 'select') {
                        currentMed.selectedMed = value;
                        currentMed.selectedPurposeIndex = 0;
                        currentMed.selectedDoseType = null; 

                        if(value && value.concentration){
                            const firstPresentation = Object.keys(value.concentration)[0];
                            currentMed.selectedPresentation = firstPresentation;
                            currentMed.concentration = value.concentration[firstPresentation].match(/(\d+\.?\d*)/)?.[0] || '';
                        } else {
                            currentMed.selectedPresentation = '';
                            currentMed.concentration = '';
                        }

                        const doseOptions = getDoseOptions(value, patient.species, patient.subSpecies);
                        const firstDose = doseOptions && doseOptions.length > 0 ? doseOptions[0] : null;
                        currentMed.customRecDose = (firstDose && firstDose.dose_range_rec !== undefined) ? firstDose.dose_range_rec : '';
                    
                    } else if (field === 'selectedPresentation') {
                        currentMed.selectedPresentation = value;
                        currentMed.concentration = currentMed.selectedMed.concentration[value].match(/(\d+\.?\d*)/)?.[0] || '';

                    } else if (field === 'concentration') {
                        currentMed.concentration = value;
                    } else if (field === 'selectedPurposeIndex') {
                        currentMed.selectedPurposeIndex = value;
                        const doseOptions = getDoseOptions(currentMed.selectedMed, patient.species, patient.subSpecies);
                        const newDose = doseOptions && doseOptions[value];
                        currentMed.customRecDose = (newDose && newDose.dose_range_rec !== undefined) ? newDose.dose_range_rec : '';
                        currentMed.selectedDoseType = null;
                    } else if (field === 'customRecDose') {
                        currentMed.customRecDose = value;
                    } else if (field === 'selectedDoseType') {
                        currentMed.selectedDoseType = value;
                    }
                    
                    updatedMedications[index] = currentMed;
                    setMedications(updatedMedications);
                };

            const handleReset = React.useCallback(() => {
                setPatient({ name: '', species: '', subSpecies: '', weight: '' });
                setMedications([]);
                addMedication();
                showNotification('Formulario reiniciado.', 'info');
            }, [addMedication]);
            
            const handleSaveDosis = () => {
                if (!patient.name || !patient.species || !patient.weight || medications.every(m => !m.selectedMed)) {
                    showNotification("Complete la información del paciente y seleccione al menos un medicamento.", "error");
                    return;
                }
                const newEntry = {
                    id: Date.now(),
                    patient: {...patient},
                    medications: medications.filter(m => m.selectedMed).map(m => {
                        const doseOptions = getDoseOptions(m.selectedMed, patient.species, patient.subSpecies);
                        const selectedPurpose = doseOptions[m.selectedPurposeIndex];
                        return {
                            name: m.selectedMed.name,
                            concentration: m.concentration,
                            purpose: selectedPurpose ? selectedPurpose.purpose : 'N/A',
                            customRecDose: m.customRecDose,
                            selectedDoseType: m.selectedDoseType
                        }
                    }),
                    timestamp: new Date().toLocaleString()
                };
                setDosisHistory(prev => [newEntry, ...prev.slice(0, 9)]);
                showNotification(`Dosis para ${patient.name} guardada en el historial.`, 'success');
            };
            
            const handleRestoreDosis = (entry) => {
                setPatient(entry.patient);
                setMedications(entry.medications.map(m_hist => {
                    const fullMedData = allMedications.find(m => m.name === m_hist.name);
                    const doseOptions = getDoseOptions(fullMedData, entry.patient.species, entry.patient.subSpecies);
                    const purposeIndex = doseOptions.findIndex(d => d.purpose === m_hist.purpose);

                    return {
                        id: Date.now() + Math.random(),
                        selectedMed: fullMedData,
                        concentration: m_hist.concentration,
                        selectedPurposeIndex: purposeIndex !== -1 ? purposeIndex : 0,
                        customRecDose: m_hist.customRecDose,
                        selectedDoseType: m_hist.selectedDoseType || null
                    }
                }));
                setShowHistory(false);
                showNotification(`Datos de ${entry.patient.name} restaurados.`, 'info');
            };

             const handleGeneratePdf = () => {
                if (!patient.name || !patient.species || !patient.weight || medications.every(m => !m.selectedMed)) {
                    showNotification("Complete todos los campos para generar el PDF.", "error");
                    return;
                }
                 if (medications.some(m => m.selectedMed && m.selectedDoseType === null)) {
                    showNotification("Por favor, seleccione una dosis (Mín, Rec, o Máx) para cada medicamento antes de generar el PDF.", "error");
                    return;
                }

                const { jsPDF } = window.jspdf;
                const doc = new jsPDF();
                
                const pageMargin = 15;
                const sidebarWidth = 60;
                const mainContentX = sidebarWidth + 5;
                const pageWidth = doc.internal.pageSize.getWidth();
                const pageHeight = doc.internal.pageSize.getHeight();
                const usableWidth = pageWidth - mainContentX - pageMargin;
                let cursorY = 20;

                // --- Sidebar (Left Column) ---
                doc.setFillColor(241, 245, 249); // slate-100
                doc.rect(0, 0, sidebarWidth, pageHeight, 'F');

                // Clinic Info (Placeholder)
                doc.setFontSize(14);
                doc.setFont("helvetica", "bold");
                doc.setTextColor(23, 37, 84); // slate-900
                doc.text("Tu Clínica Veterinaria", pageMargin, cursorY);
                cursorY += 8;
                doc.setFontSize(9);
                doc.setFont("helvetica", "normal");
                doc.setTextColor(71, 85, 105); // slate-600
                doc.text("Calle Falsa 123, Colonia Centro", pageMargin, cursorY);
                cursorY += 5;
                doc.text("Ciudad, Estado, CP 12345", pageMargin, cursorY);
                cursorY += 5;
                doc.text("Tel: (55) 1234-5678", pageMargin, cursorY);
                cursorY += 15;

                // Patient Info
                doc.setFontSize(12);
                doc.setFont("helvetica", "bold");
                doc.setTextColor(23, 37, 84);
                doc.text("Paciente", pageMargin, cursorY);
                cursorY += 8;
                doc.setLineWidth(0.2);
                doc.setDrawColor(203, 213, 225); // slate-300
                doc.line(pageMargin, cursorY - 3, sidebarWidth - pageMargin, cursorY - 3);

                doc.setFontSize(10);
                doc.setFont("helvetica", "normal");
                doc.setTextColor(71, 85, 105);
                doc.text(`Nombre: ${patient.name || 'N/A'}`, pageMargin, cursorY);
                cursorY += 7;
                doc.text(`Especie: ${patient.species || 'N/A'}${patient.subSpecies ? ` (${patient.subSpecies})` : ''}`, pageMargin, cursorY);
                cursorY += 7;
                doc.text(`Peso: ${patient.weight || 'N/A'} kg`, pageMargin, cursorY);
                cursorY += 15;

                // --- Main Content (Right Column) ---
                cursorY = 20; // Reset Y for the main column
                doc.setFontSize(22);
                doc.setFont("helvetica", "bold");
                doc.setTextColor(23, 37, 84);
                doc.text("Receta Médica", mainContentX, cursorY);
                cursorY += 8;
                doc.setFontSize(10);
                doc.setFont("helvetica", "normal");
                doc.setTextColor(100, 116, 139);
                doc.text(`Fecha: ${new Date().toLocaleDateString()}`, mainContentX, cursorY);
                cursorY += 15;
                
                 medications.filter(m => m.selectedMed && m.selectedDoseType).forEach((med, index) => {
                    const medData = med.selectedMed;
                    
                    const doseOptions = getDoseOptions(medData, patient.species, patient.subSpecies);
                    const currentPurposeData = doseOptions[med.selectedPurposeIndex] || {};
                     
                    const calculateDose = (purpose, weight, med) => {
                        if (!purpose || !weight || !med.concentration || !purpose.unit) return null;
                        const concentrationValStr = med.selectedMed.concentration[med.selectedPresentation];
                        const concentration = parseFloat(concentrationValStr.match(/(\d+\.?\d*)/)?.[0]);

                        const weightNum = parseFloat(weight);
                        if (isNaN(concentration) || concentration <= 0 || isNaN(weightNum) || weightNum <= 0) return null;
                        const calc = (doseVal) => {
                            if (doseVal === null || typeof doseVal === 'undefined' || isNaN(doseVal)) return { value: 'N/A', unit: '', formula: '' };
                            let totalDose, finalUnit = "mL", formula = '';
                            if (purpose.unit.includes('/kg')) {
                                totalDose = doseVal * weightNum;
                                formula = `(${doseVal}${purpose.unit.split(" ")[0]} * ${weightNum}kg)`;
                            } else if (purpose.unit.includes('/perro') || purpose.unit.includes('/gato')) {
                                totalDose = doseVal;
                                formula = `${doseVal} ${purpose.unit}`;
                            } else {
                                return { value: doseVal, unit: purpose.unit.split(" ")[0], formula: 'Dosis directa' };
                            }
                            if(concentrationValStr.includes("tableta")){ finalUnit = "tabletas"; } 
                            else if (concentrationValStr.includes("cápsula")){ finalUnit = "cápsulas"; }
                             else if (concentrationValStr.includes("parche")){ finalUnit = "parche(s)"; }

                            const finalValue = (totalDose / concentration);
                            return { value: finalValue % 1 === 0 ? finalValue : finalValue.toFixed(3), unit: finalUnit, formula: `${formula} / ${concentrationValStr}` };
                        };
                        return { min: calc(purpose.dose_range_min), rec: calc(purpose.dose_range_rec), max: calc(purpose.dose_range_max) };
                    };

                    const calculatedDoses = calculateDose({ ...currentPurposeData, dose_range_rec: parseFloat(med.customRecDose) }, patient.weight, med);
                    const selectedDoseData = calculatedDoses[med.selectedDoseType];
                    const doseLabel = {min: "MÍNIMA", rec: "RECOMENDADA", max: "MÁXIMA"}[med.selectedDoseType];
                    
                    if (cursorY > pageHeight - 60) { // Check for page break
                        doc.addPage();
                        // Redraw sidebar on new page
                        doc.setFillColor(241, 245, 249); // slate-100
                        doc.rect(0, 0, sidebarWidth, pageHeight, 'F');
                        cursorY = 20; // Reset cursor
                    }

                    doc.setFontSize(14);
                    doc.setFont("helvetica", "bold");
                    doc.setTextColor(23, 37, 84);
                    doc.text(`${index + 1}. ${medData.name}`, mainContentX, cursorY);
                    cursorY += 8;

                    doc.setFontSize(11);
                    doc.setFont("helvetica", "bold");
                    doc.setTextColor(59, 130, 246);
                    doc.text("Dosis:", mainContentX, cursorY);
                    doc.setFont("helvetica", "normal");
                    doc.setTextColor(45, 55, 72);
                    doc.text(`${selectedDoseData.value} ${selectedDoseData.unit}`, mainContentX + 15, cursorY);
                    cursorY += 7;

                    doc.setFont("helvetica", "bold");
                    doc.setTextColor(59, 130, 246);
                    doc.text("Vía:", mainContentX, cursorY);
                    doc.setFont("helvetica", "normal");
                    doc.setTextColor(45, 55, 72);
                    doc.text(`${currentPurposeData.route || 'N/A'}`, mainContentX + 10, cursorY);
                    cursorY += 7;

                    doc.setFont("helvetica", "bold");
                    doc.setTextColor(59, 130, 246);
                    doc.text("Frecuencia:", mainContentX, cursorY);
                    doc.setFont("helvetica", "normal");
                    doc.setTextColor(45, 55, 72);
                    doc.text(`${currentPurposeData.frequency || 'N/A'}`, mainContentX + 25, cursorY);
                    cursorY += 10;
                    
                    if (medData.recommendations) {
                        doc.setFont("helvetica", "bold");
                        doc.setTextColor(59, 130, 246);
                        doc.text("Indicaciones:", mainContentX, cursorY);
                        cursorY += 6;
                        doc.setFontSize(10);
                        doc.setFont("helvetica", "normal");
                        doc.setTextColor(71, 85, 105);
                        const recommendations = doc.splitTextToSize(medData.recommendations, usableWidth);
                        doc.text(recommendations, mainContentX, cursorY);
                        cursorY += recommendations.length * 4 + 5;
                    }
                    
                    doc.setLineWidth(0.1);
                    doc.setDrawColor(203, 213, 225);
                    doc.line(mainContentX, cursorY, pageWidth - pageMargin, cursorY);
                    cursorY += 8;
                });

                // --- Footer / Signature ---
                 const signatureY = pageHeight - 30;
                 doc.setDrawColor(23, 37, 84);
                 doc.setLineWidth(0.3);
                 doc.line(mainContentX, signatureY, pageWidth - pageMargin, signatureY);
                 doc.setFontSize(10);
                 doc.setFont("helvetica", "normal");
                 doc.setTextColor(45, 55, 72);
                 doc.text("Firma del M.V.Z.", mainContentX, signatureY + 5);


                doc.save(`Receta-${patient.name.replace(/\s/g, '_')}.pdf`);
                showNotification("PDF generado exitosamente.", "success");
            };
            
              // --- UI SUB-COMPONENTS ---
            const MedicationSearch = ({ selectedMed, onSelect, species, subSpecies, favorites, toggleFavorite }) => {
                const [searchTerm, setSearchTerm] = React.useState(selectedMed ? selectedMed.name : '');
                const [isFocused, setIsFocused] = React.useState(false);
                const searchRef = React.useRef(null);

                React.useEffect(() => {
                    setSearchTerm(selectedMed ? selectedMed.name : '');
                }, [selectedMed]);
                
                  const filteredMeds = React.useMemo(() => {
                    const allFiltered = allMedications.filter(m => {
                        const hasDoseForSpecies = getDoseOptions(m, species, subSpecies).length > 0;
                        const matchesSearch = searchTerm === '' || m.name.toLowerCase().includes(searchTerm.toLowerCase()) || (m.commercial_names && m.commercial_names.join(' ').toLowerCase().includes(searchTerm.toLowerCase()));
                        return hasDoseForSpecies && matchesSearch;
                    });

                    return allFiltered.sort((a, b) => {
                        const aIsFav = favorites.includes(a.name);
                        const bIsFav = favorites.includes(b.name);
                        if (aIsFav && !bIsFav) return -1;
                        if (!aIsFav && bIsFav) return 1;
                        return a.name.localeCompare(b.name);
                    });
                }, [searchTerm, species, subSpecies, favorites, allMedications]);


                const handleSelectMed = (medData) => {
                    setSearchTerm(medData ? medData.name : '');
                    onSelect(medData);
                    setIsFocused(false);
                };
                
                React.useEffect(() => {
                    const handleClickOutside = (event) => {
                        if (searchRef.current && !searchRef.current.contains(event.target)) setIsFocused(false);
                    };
                    document.addEventListener("mousedown", handleClickOutside);
                    return () => document.removeEventListener("mousedown", handleClickOutside);
                }, []);

                return (
                    <div className="relative w-full" ref={searchRef}>
                        <input type="text" value={searchTerm} onChange={(e) => setSearchTerm(e.target.value)} onFocus={() => setIsFocused(true)} placeholder="Buscar medicamento..." className="w-full px-3 py-2 text-gray-200 bg-slate-700 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 font-normal"/>
                        {searchTerm && (
                            <button onClick={() => handleSelectMed(null)} className="absolute right-10 top-0 h-full px-2 text-gray-500 hover:text-white">
                                <X className="w-4 h-4"/>
                            </button>
                        )}
                        {isFocused && (
                            <ul className="absolute z-20 w-full mt-1 bg-slate-700 border border-slate-600 rounded-lg max-h-60 overflow-y-auto" style={{ WebkitOverflowScrolling: 'touch' }}>
                                {filteredMeds.length > 0 ? filteredMeds.map(medData => {
                                    const isFav = favorites.includes(medData.name);
                                    return (
                                    <li key={medData.name} onClick={() => handleSelectMed(medData)} className={`flex justify-between items-center px-4 py-2 cursor-pointer hover:bg-slate-600 text-gray-200 ${isFav ? 'bg-slate-800' : ''}`}>
                                        <div>
                                            {medData.name} <span className="text-xs text-gray-400">({(medData.commercial_names || []).join(', ')})</span>
                                        </div>
                                        <button onClick={(e) => { e.stopPropagation(); toggleFavorite(medData.name); }} className={`p-1 rounded-full hover:bg-slate-500 ${isFav ? 'text-yellow-400' : 'text-gray-500'}`}>
                                            <Star size={16} fill={isFav ? 'currentColor' : 'none'} />
                                        </button>
                                    </li>
                                    );
                                }) : <li className="px-4 py-2 text-gray-400">No hay coincidencias.</li>}
                            </ul>
                        )}
                        <button onClick={() => setIsFocused(!isFocused)} className="absolute right-0 top-0 h-full px-3 text-gray-400 hover:text-white">
                            <ChevronDown className="w-5 h-5"/>
                        </button>
                    </div>
                );
            };

            const DosageBlock = ({ med, index, handleUpdateUserMed, patient }) => {
                const [localConcentration, setLocalConcentration] = React.useState('');
                const [localCustomRecDose, setLocalCustomRecDose] = React.useState('');
                const [isDirty, setIsDirty] = React.useState(false);
                
                React.useEffect(() => {
                    setLocalConcentration(med.concentration);
                    setLocalCustomRecDose(med.customRecDose);
                }, [med.concentration, med.customRecDose]);

                const removeMedication = (index) => {
                    setMedications(medications.filter((_, i) => i !== index));
                };

                const medData = med.selectedMed;
                const doseOptions = React.useMemo(() => getDoseOptions(medData, patient.species, patient.subSpecies), [medData, patient.species, patient.subSpecies]);
                const currentPurposeData = doseOptions[med.selectedPurposeIndex] || {};
                
                const purposeDataForCalc = { 
                    ...currentPurposeData, 
                    dose_range_rec: parseFloat(localCustomRecDose) 
                };

                React.useEffect(() => {
                    if (!medData) {
                        setIsDirty(false);
                        return;
                    }
                    const originalMed = allMedications.find(m => m.name === medData.name);
                    if (!originalMed || !med.selectedPresentation) {
                         setIsDirty(false);
                         return;
                    }
                    
                    const originalConcentrationStr = originalMed.concentration[med.selectedPresentation] || '';
                    const originalConcentrationNum = originalConcentrationStr.match(/(\d+\.?\d*)/)?.[0] || '';

                    const originalDoseOptions = getDoseOptions(originalMed, patient.species, patient.subSpecies);
                    const originalPurposeData = originalDoseOptions[med.selectedPurposeIndex] || {};
                    
                    const concChanged = originalConcentrationNum !== localConcentration;
                    const doseChanged = (originalPurposeData.dose_range_rec !== undefined && parseFloat(originalPurposeData.dose_range_rec) !== parseFloat(localCustomRecDose));

                    setIsDirty(concChanged || doseChanged);

                }, [medData, localConcentration, localCustomRecDose, med.selectedPurposeIndex, med.selectedPresentation, patient.species, patient.subSpecies]);

                const handleSaveChanges = () => {
                     const originalMed = allMedications.find(m => m.name === medData.name);
                     if (!originalMed || !med.selectedPresentation) return;

                     // Create a deep copy to avoid direct mutation
                     const medToSave = JSON.parse(JSON.stringify(originalMed));

                     // Update concentration
                     const oldConcStr = medToSave.concentration[med.selectedPresentation];
                     const newConcStr = oldConcStr.replace(/(\d+\.?\d*)/, localConcentration);
                     medToSave.concentration[med.selectedPresentation] = newConcStr;

                     // Update dose
                     const speciesKey = patient.subSpecies || patient.species;
                     if(medToSave.doses[speciesKey] && medToSave.doses[speciesKey][med.selectedPurposeIndex]){
                         medToSave.doses[speciesKey][med.selectedPurposeIndex].dose_range_rec = parseFloat(localCustomRecDose);
                     }

                     handleUpdateUserMed(medToSave);
                     setIsDirty(false);
                };
                
                const parseUnitString = (unitStr) => {
                    if (!unitStr) return { multiplier: 1, unit: 'mg' };
                    const lowerStr = unitStr.toLowerCase();
                    if (lowerStr.includes('mcg')) return { multiplier: 0.001, unit: 'mcg' };
                    if (lowerStr.includes('ui')) return { multiplier: 1, unit: 'UI' };
                    if (lowerStr.includes('g')) return { multiplier: 1000, unit: 'g' };
                    return { multiplier: 1, unit: 'mg' };
                }

                const calculateDose = (purpose, weight, med) => {
                    if (!purpose || !weight || !med.selectedMed || !med.selectedPresentation || !purpose.unit) return null;

                    const concentrationValStr = med.selectedMed.concentration[med.selectedPresentation];
                    if (!concentrationValStr) return null;
                    
                    const concentrationNum = parseFloat(concentrationValStr.match(/(\d+\.?\d*)/)?.[0]);
                    const weightNum = parseFloat(weight);

                    if (isNaN(concentrationNum) || concentrationNum <= 0 || isNaN(weightNum) || weightNum <= 0) return null;

                    const doseUnitInfo = parseUnitString(purpose.unit);
                    const concUnitInfo = parseUnitString(concentrationValStr);
                    
                    const calc = (doseVal) => {
                        if (doseVal === null || typeof doseVal === 'undefined' || isNaN(doseVal)) return { value: 'N/A', unit: '', formula: '' };
                        
                        let totalDoseAmount;
                        let formula = '';
                        
                        if (purpose.unit.includes('/kg')) {
                            totalDoseAmount = doseVal * weightNum;
                            formula = `(${doseVal} ${purpose.unit.split('/')[0]} * ${weightNum}kg)`;
                        } else if (purpose.unit.includes('/perro') || purpose.unit.includes('/gato') || purpose.unit.includes('por gato') || purpose.unit.includes('/hurón')) {
                            totalDoseAmount = doseVal;
                            formula = `${doseVal} ${purpose.unit}`;
                        } else {
                            return { value: doseVal, unit: purpose.unit.split(' ')[0], formula: 'Dosis directa' };
                        }

                        let finalUnit = "mL";
                        if(concentrationValStr.toLowerCase().includes("tableta")){ finalUnit = "tabletas"; } 
                        else if (concentrationValStr.toLowerCase().includes("cápsula")){ finalUnit = "cápsulas"; }
                        else if (concentrationValStr.toLowerCase().includes("parche")){ finalUnit = "parche(s)"; }
                        
                        const doseInBaseUnits = totalDoseAmount * doseUnitInfo.multiplier;
                        const concInBaseUnits = concentrationNum * concUnitInfo.multiplier;

                        const finalValue = doseInBaseUnits / concInBaseUnits;
                        
                        return {
                            value: finalValue % 1 === 0 ? finalValue : finalValue.toFixed(3),
                            unit: finalUnit,
                            formula: `${formula} / ${concentrationValStr}`
                        };
                    };
                    return { min: calc(purpose.dose_range_min), rec: calc(purpose.dose_range_rec), max: calc(purpose.dose_range_max) };
                };
                
                const calculatedDoses = calculateDose(purposeDataForCalc, patient.weight, med);

                const DoseDisplay = ({ dose, label, color, type, isSelected, onSelect }) => {
                    const selectedClasses = "ring-2 ring-offset-2 ring-offset-slate-800";
                    const colorClasses = {
                        yellow: `border-yellow-500/50 ${isSelected ? "ring-yellow-500" : ""}`,
                        green: `border-green-500/50 ${isSelected ? "ring-green-500" : ""}`,
                        red: `border-red-500/50 ${isSelected ? "ring-red-500" : ""}`,
                    };

                    if (!dose || dose.value === 'N/A') return <div className="p-2 border border-gray-600 rounded-lg flex items-center justify-center cursor-not-allowed"><p className="text-gray-500">N/A</p></div>;
                    
                    return (
                        <div onClick={onSelect} className={`p-2 border rounded-lg overflow-hidden cursor-pointer relative transition-all ${colorClasses[color]} ${isSelected ? selectedClasses : "hover:scale-105"}`}>
                           {isSelected && (
                                <button onClick={(e) => { e.stopPropagation(); onSelect(null); }} className="absolute top-1 right-1 bg-slate-700 rounded-full p-0.5 text-white hover:bg-slate-600 z-10">
                                    <X size={12} />
                                </button>
                            )}
                            <p className={`text-xs text-${color}-400 font-bold`}>{label}</p>
                            <p className={`text-xl text-${color}-400 font-mono font-bold`}>
                                {dose.value} <span className="text-sm">{dose.unit}</span>
                            </p>
                            <p className="text-[10px] text-gray-500 font-mono break-all">{dose.formula}</p>
                        </div>
                    );
                };

                const doseDisplaySection = () => {
                    if (!calculatedDoses) return <div className="p-3 bg-gray-700/50 rounded-lg text-center text-gray-400"><p>Complete los datos para calcular la dosis.</p></div>;

                    if (med.selectedDoseType) {
                        const type = med.selectedDoseType;
                        const label = { min: "MÍNIMA", rec: "RECOMENDADA", max: "MÁXIMA" }[type];
                        const color = { min: "yellow", rec: "green", max: "red" }[type];
                        return (
                             <DoseDisplay dose={calculatedDoses[type]} label={label} color={color} type={type} isSelected={true} onSelect={() => handleMedicationUpdate(index, 'selectedDoseType', null)} />
                        );
                    }

                    return (
                        <div className="grid grid-cols-1 sm:grid-cols-3 gap-2 text-center">
                            <DoseDisplay dose={calculatedDoses.min} label="MÍNIMA" color="yellow" type="min" isSelected={false} onSelect={() => handleMedicationUpdate(index, 'selectedDoseType', 'min')} />
                            <DoseDisplay dose={calculatedDoses.rec} label="RECOMENDADA" color="green" type="rec" isSelected={false} onSelect={() => handleMedicationUpdate(index, 'selectedDoseType', 'rec')} />
                            <DoseDisplay dose={calculatedDoses.max} label="MÁXIMA" color="red" type="max" isSelected={false} onSelect={() => handleMedicationUpdate(index, 'selectedDoseType', 'max')} />
                        </div>
                    );
                };

                return (
                       <div className="bg-slate-800 p-4 rounded-xl shadow-lg mt-4 border border-slate-700">
                            <div className="flex justify-between items-center mb-4 gap-2">
                                <label className="block text-gray-300 text-sm font-bold whitespace-nowrap">Medicamento</label>
                                <div className="flex items-center w-full">
                                    <MedicationSearch selectedMed={medData} onSelect={(data) => handleMedicationUpdate(index, 'select', data)} species={patient.species} subSpecies={patient.subSpecies} favorites={favorites} toggleFavorite={toggleFavorite} />
                                    {medications.length > 1 && (<button onClick={() => removeMedication(index)} className="ml-2 p-2 bg-red-600 text-white rounded-full hover:bg-red-700 transition-colors" title="Eliminar medicamento"><X size={16} /></button>)}
                                </div>
                            </div>
                            
                            {medData && (
                            <div className="space-y-4">
                                <div className="grid grid-cols-1 md:grid-cols-2 gap-4 items-end">
                                    {medData.concentration && Object.keys(medData.concentration).length > 0 && (
                                         <div>
                                            <label className="text-gray-300 text-sm font-bold mr-2 mb-1 block whitespace-nowrap">Presentación:</label>
                                            <select value={med.selectedPresentation} onChange={e => handleMedicationUpdate(index, 'selectedPresentation', e.target.value)} className="w-full px-4 py-2 bg-slate-700 text-gray-200 rounded-xl focus:outline-none focus:ring-2 focus:ring-blue-500 font-normal">
                                                {Object.keys(medData.concentration).map((pres) => (
                                                    <option key={pres} value={pres}>{pres} ({medData.concentration[pres]})</option>
                                                ))}
                                            </select>
                                        </div>
                                    )}
                                    {doseOptions && doseOptions.length > 0 && (
                                         <div className="w-full">
                                            <label className="text-gray-300 text-sm font-bold mr-2 mb-1 block whitespace-nowrap">Uso del Medicamento:</label>
                                            <select value={med.selectedPurposeIndex} onChange={e => handleMedicationUpdate(index, 'selectedPurposeIndex', parseInt(e.target.value))} className="w-full px-4 py-2 bg-slate-700 text-gray-200 rounded-xl focus:outline-none focus:ring-2 focus:ring-blue-500 font-normal">
                                                {doseOptions.map((dose, idx) => (
                                                    <option key={`${dose.purpose}-${idx}`} value={idx}>{dose.purpose}</option>
                                                ))}
                                            </select>
                                        </div>
                                    )}
                                </div>
                                <div className="grid grid-cols-1 md:grid-cols-2 gap-4 items-end">
                                    <div>
                                        <label className="text-gray-300 text-sm font-bold mr-2 whitespace-nowrap">Concentración Numérica:</label>
                                        <input type="text" inputMode="decimal" value={localConcentration} onChange={(e) => setLocalConcentration(e.target.value)} onBlur={() => handleMedicationUpdate(index, 'concentration', localConcentration)} className="w-full mt-1 px-4 py-2 bg-slate-700 text-gray-200 rounded-xl focus:outline-none focus:ring-2 focus:ring-blue-500 font-normal" placeholder="Ej: 50" />
                                    </div>
                                    <div>
                                        <label className="text-gray-300 text-sm font-bold mr-2 whitespace-nowrap">Dosis Manual:</label>
                                         <input type="text" inputMode="decimal" value={localCustomRecDose} onChange={(e) => setLocalCustomRecDose(e.target.value)} onBlur={() => handleMedicationUpdate(index, 'customRecDose', localCustomRecDose)} className="w-full mt-1 px-4 py-2 bg-slate-700 text-gray-200 rounded-xl focus:outline-none focus:ring-2 focus:ring-blue-500 font-normal" />
                                         {currentPurposeData.dose_range_min !== undefined && (
                                            <p className="text-xs text-gray-400 mt-1">
                                                Rango Sugerido: {currentPurposeData.dose_range_min} - {currentPurposeData.dose_range_max} {currentPurposeData.unit}
                                            </p>
                                        )}
                                    </div>
                                </div>
                                
                                {isDirty && (
                                    <button onClick={handleSaveChanges} className="w-full flex items-center justify-center gap-2 py-2 px-4 bg-green-600 hover:bg-green-700 rounded-lg text-white font-bold text-sm">
                                        <Save size={16} /> Guardar Cambios en Vademécum
                                    </button>
                                )}

                                <div className="my-4">
                                    <h3 className="text-md font-bold text-gray-300 mb-2">Dosis Calculada (Selecciona una)</h3>
                                    {doseDisplaySection()}
                                    {calculatedDoses && (
                                        <div className="text-center mt-2 text-sm text-gray-400">
                                            <p>Vía: <span className="font-bold text-gray-200">{currentPurposeData.route || 'N/A'}</span></p>
                                            <p>Frecuencia: <span className="font-bold text-gray-200">{currentPurposeData.frequency || 'N/A'}</span></p>
                                        </div>
                                    )}
                                </div>
                                
                                <MedicationInfo medData={medData} />
                            </div>
                            )}
                       </div>
                );
            };
            
            // --- RENDER LOGIC ---
            const renderContent = () => {
                const isExoticCategory = ['Aves', 'Reptiles', 'Conejos', 'Anfibios', 'Pequeños Mamíferos'].includes(patient.species);
                
                switch (activeView) {
                    case 'emergency': return <EmergencyMode onExit={() => setActiveView('calculator')} />;
                    case 'tools': return <ToolsMenu onSelect={(tool) => setActiveView(tool)} />;
                    case 'fluid': return <FluidTherapyCalculator onClose={() => setActiveView('calculator')} />;
                    case 'bsa': return <BSACalculator onClose={() => setActiveView('calculator')} />;
                    case 'cri': return <CRICalculator onClose={() => setActiveView('calculator')} />;
                    case 'dilution': return <DilutionCalculator onClose={() => setActiveView('calculator')} />;
                    case 'vademecum': return <VademecumView allMedications={allMedications} favorites={favorites} toggleFavorite={toggleFavorite} onClose={() => setActiveView('calculator')} />;
                    case 'protocols': return <AnestheticProtocolsView onClose={() => setActiveView('calculator')} />;
                    case 'constants': return <PhysiologicalConstantsView onClose={() => setActiveView('calculator')} />;
                    case 'addMed': return <AddMedicationAI onSave={handleAddNewMedication} onClose={() => setActiveView('calculator')} />;
                    case 'calculator':
                    default:
                        return (
                           <div className="bg-slate-900 p-6 rounded-3xl shadow-xl border border-gray-700">
                              <h2 className="text-xl font-bold mb-4 text-white">Información del Paciente</h2>
                                <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-4 mb-4">
                                    <div>
                                        <label htmlFor="patientName" className="block text-sm font-bold text-gray-400 mb-1">Nombre</label>
                                        <input id="patientName" type="text" name="name" value={patient.name} onChange={handlePatientChange} className="w-full px-4 py-2 bg-slate-700 text-gray-200 rounded-xl focus:outline-none focus:ring-2 focus:ring-blue-500 font-normal" />
                                    </div>
                                    <div>
                                        <label htmlFor="patientSpecies" className="block text-sm font-bold text-gray-400 mb-1">Especie</label>
                                        <select id="patientSpecies" name="species" value={patient.species} onChange={handlePatientChange} className="w-full px-4 py-2 bg-slate-700 text-gray-200 rounded-xl focus:outline-none focus:ring-2 focus:ring-blue-500 font-normal">
                                            <option value="">Selecciona</option>
                                            {speciesList.map(species => (<option key={species} value={species}>{speciesEmojis[species] || ''} {species}</option>))}
                                        </select>
                                    </div>
                                    {isExoticCategory && (
                                        <div>
                                            <label htmlFor="patientSubSpecies" className="block text-sm font-bold text-gray-400 mb-1">{patient.species}</label>
                                            <select id="patientSubSpecies" name="subSpecies" value={patient.subSpecies} onChange={handlePatientChange} className="w-full px-4 py-2 bg-slate-700 text-gray-200 rounded-xl focus:outline-none focus:ring-2 focus:ring-blue-500 font-normal">
                                                <option value="">Selecciona específico</option>
                                                {exoticSpeciesMap[patient.species] && exoticSpeciesMap[patient.species].map(subSpecies => (
                                                    <option key={subSpecies} value={subSpecies}>{subSpecies}</option>
                                                ))}
                                            </select>
                                        </div>
                                    )}
                                     <div>
                                        <label htmlFor="patientWeight" className="block text-sm font-bold text-gray-400 mb-1">Peso (kg)</label>
                                        <input id="patientWeight" type="number" name="weight" value={patient.weight} onChange={handlePatientChange} min="0" step="0.1" className="w-full px-4 py-2 bg-slate-700 text-gray-200 rounded-xl focus:outline-none focus:ring-2 focus:ring-blue-500 font-normal" placeholder="Ej: 10.5"/>
                                    </div>
                                </div>
                                
                                {interactionWarning && (
                                    <div className="flex items-start p-3 my-4 bg-purple-900/50 border-l-4 border-purple-500 rounded-md text-purple-300">
                                        <AlertTriangle className="mr-3 flex-shrink-0 mt-1" />
                                        <div><strong className="font-bold">Posible Interacción:</strong> {interactionWarning}</div>
                                    </div>
                                )}

                                {(patient.species && patient.weight && (!isExoticCategory || patient.subSpecies)) ? medications.map((med, index) => (<DosageBlock key={med.id} med={med} index={index} handleUpdateUserMed={handleUpdateUserMed} patient={patient} />)) : (
                                   <div className="text-center py-8 text-gray-500">
                                     <p>Por favor, completa la información del paciente para empezar.</p>
                                   </div>
                                )}
                                
                                {(patient.species && patient.weight && (!isExoticCategory || patient.subSpecies)) && (
                                   <div className="flex flex-wrap items-center justify-between mt-6 gap-3">
                                     <button onClick={addMedication} className="flex items-center space-x-2 px-4 py-2 text-white bg-blue-600 rounded-full hover:bg-blue-700 transition-colors shadow-lg"><PlusCircle size={20} /><span>Añadir Medicamento</span></button>
                                     <div className="flex items-center gap-3">
                                         <button onClick={handleSaveDosis} className="flex items-center space-x-2 px-4 py-2 text-white bg-green-600 rounded-full hover:bg-green-700 transition-colors shadow-lg"><ClipboardList size={20} /><span>Guardar Dosis</span></button>
                                         <button onClick={handleGeneratePdf} className="flex items-center space-x-2 px-4 py-2 text-white bg-red-600 rounded-full hover:bg-red-700 transition-colors shadow-lg"><FileDown size={20} /><span>Generar PDF</span></button>
                                     </div>
                                   </div>
                                )}
                          </div>
                        );
                }
            }


        return (
          <div className="min-h-screen bg-slate-950 p-4 font-sans text-gray-200">
              <div className="max-w-4xl mx-auto">
                  {notification && (<div className={`fixed top-5 right-5 p-4 rounded-lg shadow-lg text-white z-50 animate-fade-in-out ${notification.type === 'success' ? 'bg-green-600' : notification.type === 'error' ? 'bg-red-600' : 'bg-blue-600'}`}>{notification.message}</div>)}

                  <div className="text-center p-4">
                      <h1 className="text-3xl sm:text-4xl font-extrabold text-white">Dosis Perronas</h1>
                      <p className="text-sm text-gray-400 font-normal">by: Arturo Alvarado</p>
                  </div>
                  
                  <div className="flex justify-center items-center flex-wrap gap-2 p-2 mb-6 bg-slate-900 rounded-xl">
                        <button onClick={() => setActiveView(activeView === 'calculator' ? 'tools' : 'calculator')} className="p-2 text-gray-400 hover:text-white transition-colors" title="Herramientas"><Menu size={24} /></button>
                        <button onClick={() => setActiveView('emergency')} className="p-2 text-red-500 hover:text-red-400 transition-colors" title="Modo Emergencia"><Siren size={24} /></button>
                        <button onClick={handleReset} className="p-2 text-gray-400 hover:text-red-500 transition-colors" title="Reiniciar"><RotateCw size={24} /></button>
                        <button onClick={() => setShowHistory(true)} className="p-2 text-gray-400 hover:text-white transition-colors" title="Historial"><MoreVertical size={24} /></button>
                  </div>
                    
                    {renderContent()}

                    {showHistory && <HistoryModal history={dosisHistory} onClose={() => setShowHistory(false)} onRestore={handleRestoreDosis} />}
              </div>
          </div>
        );
      };
      
        ReactDOM.render(<DosisApp />, document.getElementById('root'));
    </script>
</body>
</html>

